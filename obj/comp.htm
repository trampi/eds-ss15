<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\comp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\comp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Fri Jul 03 16:55:50 2015
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
uart_isr0 &rArr; BSP_onKeyboardInput &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[1c]">T_SWI_Handler</a>
 <LI><a href="#[7b]">disable_irq</a>
 <LI><a href="#[7c]">enable_irq</a>
 <LI><a href="#[2]">Undef_Handler</a>
 <LI><a href="#[3]">SWI_Handler</a>
 <LI><a href="#[4]">PAbt_Handler</a>
 <LI><a href="#[5]">DAbt_Handler</a>
 <LI><a href="#[6]">IRQ_Handler</a>
 <LI><a href="#[7]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">Undef_Handler</a><BR>
 <LI><a href="#[4]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PAbt_Handler</a><BR>
 <LI><a href="#[5]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">DAbt_Handler</a><BR>
 <LI><a href="#[6]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IRQ_Handler</a><BR>
 <LI><a href="#[7]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from adwheel.o(.text) referenced from adwheel.o(.text)
 <LI><a href="#[66]">Alarm_initial</a> from alarm.o(.text) referenced from alarm.o(.text)
 <LI><a href="#[11]">Alarm_off</a> from alarm.o(.text) referenced 3 times from alarm.o(.text)
 <LI><a href="#[65]">Alarm_on</a> from alarm.o(.text) referenced from alarm.o(.text)
 <LI><a href="#[60]">CoffeeAO_coffeePotToggle</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[10]">CoffeeAO_coffeemachine</a> from coffee.o(.text) referenced 2 times from coffee.o(.text)
 <LI><a href="#[62]">CoffeeAO_initial</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[b]">CoffeeAO_menu</a> from coffee.o(.text) referenced 2 times from coffee.o(.text)
 <LI><a href="#[f]">CoffeeAO_setBrewStrength</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[5d]">CoffeeAO_set_brew_h1</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[5e]">CoffeeAO_set_brew_h2</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[5c]">CoffeeAO_set_brew_m1</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[5b]">CoffeeAO_set_brew_m2</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[d]">CoffeeAO_set_clock_h1</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[57]">CoffeeAO_set_clock_h2</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[58]">CoffeeAO_set_clock_m1</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[56]">CoffeeAO_set_clock_m2</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[e]">CoffeeAO_startBrewingNow</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[c]">CoffeeAO_submenu</a> from coffee.o(.text) referenced 7 times from coffee.o(.text)
 <LI><a href="#[5f]">CoffeeAO_timeBrewActivatedToggle</a> from coffee.o(.text) referenced from coffee.o(.text)
 <LI><a href="#[5]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">GPIO_IRQHandler</a> from button.o(.text) referenced from button.o(.text)
 <LI><a href="#[6]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">QActive_postLIFO_</a> from qa_lifo.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[19]">QActive_post_</a> from qa_fifo.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[18]">QActive_start_</a> from qvanilla.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[15]">QFsm_dispatch_</a> from qfsm_dis.o(.text) referenced from qfsm_ini.o(.constdata)
 <LI><a href="#[14]">QFsm_init_</a> from qfsm_ini.o(.text) referenced from qfsm_ini.o(.constdata)
 <LI><a href="#[17]">QHsm_dispatch_</a> from qhsm_dis.o(.text) referenced 2 times from qhsm_ini.o(.constdata)
 <LI><a href="#[16]">QHsm_init_</a> from qhsm_ini.o(.text) referenced 2 times from qhsm_ini.o(.constdata)
 <LI><a href="#[a]">QHsm_top</a> from qhsm_top.o(.text) referenced 2 times from qhsm_ini.o(.text)
 <LI><a href="#[1]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">T0_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[35]">T1_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[2]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[13]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[12]">fputc</a> from retarget.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[9]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2f]">uart_isr0</a> from serial.o(.text) referenced from serial.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[84]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1d]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[86]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[87]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[88]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[89]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12]"></a>fputc</STRONG> (ARM, 44 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[20]"></a>getch</STRONG> (ARM, 16 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey0
</UL>

<P><STRONG><a name="[22]"></a>fgetc</STRONG> (ARM, 20 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey0
</UL>

<P><STRONG><a name="[23]"></a>_ttywrch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[72]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_boom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_exit
</UL>

<P><STRONG><a name="[27]"></a>lcd_write_4bit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_4bit
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[28]"></a>lcd_write_cmd</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[2a]"></a>lcd_putchar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_putchar &rArr; lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[2b]"></a>lcd_init</STRONG> (ARM, 176 bytes, Stack size 16 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_init &rArr; lcd_putchar &rArr; lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2c]"></a>set_cursor</STRONG> (ARM, 52 bytes, Stack size 16 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_display_str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_brew_h1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[2d]"></a>lcd_clear</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_brew_h1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[2e]"></a>lcd_print</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_print &rArr; lcd_putchar &rArr; lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_display_str
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_brew_h1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[6d]"></a>LED_Init</STRONG> (ARM, 36 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[54]"></a>LED_On</STRONG> (ARM, 20 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[55]"></a>LED_Off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[8a]"></a>LED_Out</STRONG> (ARM, 24 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>init_serial</STRONG> (ARM, 68 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>send_char</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8c]"></a>kbhit</STRONG> (ARM, 44 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>getkey</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>getkey0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getch
</UL>

<P><STRONG><a name="[30]"></a>get_char</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr0
</UL>

<P><STRONG><a name="[2f]"></a>uart_isr0</STRONG> (ARM, 56 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_isr0 &rArr; BSP_onKeyboardInput &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_onKeyboardInput
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>uart_init_0</STRONG> (ARM, 120 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (ARM, 108 bytes, Stack size 24 bytes, adwheel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adwheel.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>AD_Wheel_Init</STRONG> (ARM, 104 bytes, Stack size 0 bytes, adwheel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[33]"></a>T0_IRQHandler</STRONG> (ARM, 64 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = T0_IRQHandler &rArr; QF_tickX_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>Timer0_Init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[35]"></a>T1_IRQHandler</STRONG> (ARM, 52 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>Timer1_Init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[38]"></a>button_down</STRONG> (ARM, 4 bytes, Stack size 0 bytes, button.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>button_up</STRONG> (ARM, 80 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_up
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>GPIO_IRQHandler</STRONG> (ARM, 84 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_IRQHandler &rArr; button_up
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_up
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>Button_Init</STRONG> (ARM, 128 bytes, Stack size 0 bytes, button.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[15]"></a>QFsm_dispatch_</STRONG> (ARM, 144 bytes, Stack size 16 bytes, qfsm_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QFsm_dispatch_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qfsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>QFsm_ctor</STRONG> (ARM, 24 bytes, Stack size 0 bytes, qfsm_ini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_ctor
</UL>

<P><STRONG><a name="[14]"></a>QFsm_init_</STRONG> (ARM, 144 bytes, Stack size 16 bytes, qfsm_ini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QFsm_init_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qfsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>QHsm_dispatch_</STRONG> (ARM, 484 bytes, Stack size 56 bytes, qhsm_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QHsm_dispatch_ &rArr; QHsm_tran_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qhsm_ini.o(.constdata)
<LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>QHsm_ctor</STRONG> (ARM, 24 bytes, Stack size 0 bytes, qhsm_ini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[16]"></a>QHsm_init_</STRONG> (ARM, 332 bytes, Stack size 48 bytes, qhsm_ini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QHsm_init_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qhsm_ini.o(.constdata)
<LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>QHsm_top</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qhsm_top.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> qhsm_ini.o(.text)
<LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>QActive_ctor</STRONG> (ARM, 40 bytes, Stack size 16 bytes, qa_ctor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_ctor
</UL>

<P><STRONG><a name="[19]"></a>QActive_post_</STRONG> (ARM, 260 bytes, Stack size 24 bytes, qa_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QActive_post_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>QActive_get_</STRONG> (ARM, 208 bytes, Stack size 16 bytes, qa_get_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QActive_get_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[3f]"></a>QF_getQueueMin</STRONG> (ARM, 80 bytes, Stack size 16 bytes, qa_get_.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[1a]"></a>QActive_postLIFO_</STRONG> (ARM, 204 bytes, Stack size 24 bytes, qa_lifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QActive_postLIFO_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>QEQueue_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, qeq_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[40]"></a>QF_add_</STRONG> (ARM, 84 bytes, Stack size 16 bytes, qf_act.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QF_add_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[41]"></a>QF_remove_</STRONG> (ARM, 88 bytes, Stack size 16 bytes, qf_act.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_stop
</UL>

<P><STRONG><a name="[4b]"></a>QF_bzero</STRONG> (ARM, 36 bytes, Stack size 0 bytes, qf_act.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[3d]"></a>QF_gc</STRONG> (ARM, 132 bytes, Stack size 16 bytes, qf_gc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[43]"></a>QF_newX_</STRONG> (ARM, 200 bytes, Stack size 24 bytes, qf_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_onKeyboardInput
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_on
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_coffeePotToggle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_timeBrewActivatedToggle
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_m2
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_startBrewingNow
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength
</UL>

<P><STRONG><a name="[45]"></a>QF_poolInit</STRONG> (ARM, 180 bytes, Stack size 16 bytes, qf_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QF_poolInit &rArr; QMPool_init &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>QF_tickX_</STRONG> (ARM, 312 bytes, Stack size 24 bytes, qf_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QF_tickX_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>QF_noTimeEvtsActiveX</STRONG> (ARM, 104 bytes, Stack size 16 bytes, qf_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[44]"></a>QMPool_get</STRONG> (ARM, 220 bytes, Stack size 24 bytes, qmp_get.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>

<P><STRONG><a name="[48]"></a>QF_getPoolMin</STRONG> (ARM, 88 bytes, Stack size 16 bytes, qmp_get.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[46]"></a>QMPool_init</STRONG> (ARM, 252 bytes, Stack size 32 bytes, qmp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QMPool_init &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
</UL>

<P><STRONG><a name="[42]"></a>QMPool_put</STRONG> (ARM, 112 bytes, Stack size 16 bytes, qmp_put.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QMPool_put &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[49]"></a>QTimeEvt_ctorX</STRONG> (ARM, 92 bytes, Stack size 24 bytes, qte_ctor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QTimeEvt_ctorX &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_ctor
</UL>

<P><STRONG><a name="[4a]"></a>QF_init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QF_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>QF_stop</STRONG> (ARM, 16 bytes, Stack size 8 bytes, qvanilla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onCleanup
</UL>

<P><STRONG><a name="[4e]"></a>QF_run</STRONG> (ARM, 128 bytes, Stack size 0 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QF_run &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>QActive_start_</STRONG> (ARM, 132 bytes, Stack size 32 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QActive_start_ &rArr; QF_add_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>QActive_stop</STRONG> (ARM, 24 bytes, Stack size 8 bytes, qvanilla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
</UL>

<P><STRONG><a name="[10]"></a>CoffeeAO_coffeemachine</STRONG> (ARM, 128 bytes, Stack size 16 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CoffeeAO_coffeemachine &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>CoffeeAO_submenu</STRONG> (ARM, 60 bytes, Stack size 0 bytes, coffee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>CoffeeAO_setBrewStrength</STRONG> (ARM, 524 bytes, Stack size 24 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoffeeAO_setBrewStrength &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>CoffeeAO_startBrewingNow</STRONG> (ARM, 208 bytes, Stack size 24 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoffeeAO_startBrewingNow &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>CoffeeAO_set_clock_m2</STRONG> (ARM, 148 bytes, Stack size 24 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoffeeAO_set_clock_m2 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>CoffeeAO_set_clock_m1</STRONG> (ARM, 80 bytes, Stack size 0 bytes, coffee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>CoffeeAO_set_clock_h2</STRONG> (ARM, 328 bytes, Stack size 48 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CoffeeAO_set_clock_h2 &rArr; lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>CoffeeAO_set_clock_h1</STRONG> (ARM, 280 bytes, Stack size 48 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CoffeeAO_set_clock_h1 &rArr; lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>CoffeeAO_set_brew_m2</STRONG> (ARM, 80 bytes, Stack size 0 bytes, coffee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>CoffeeAO_set_brew_m1</STRONG> (ARM, 80 bytes, Stack size 0 bytes, coffee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>CoffeeAO_set_brew_h2</STRONG> (ARM, 80 bytes, Stack size 0 bytes, coffee.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>CoffeeAO_set_brew_h1</STRONG> (ARM, 148 bytes, Stack size 16 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoffeeAO_set_brew_h1 &rArr; lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>CoffeeAO_timeBrewActivatedToggle</STRONG> (ARM, 200 bytes, Stack size 24 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoffeeAO_timeBrewActivatedToggle &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>CoffeeAO_coffeePotToggle</STRONG> (ARM, 296 bytes, Stack size 24 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CoffeeAO_coffeePotToggle &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>CoffeeAO_menu</STRONG> (ARM, 568 bytes, Stack size 40 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CoffeeAO_menu &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>CoffeeAO_initial</STRONG> (ARM, 80 bytes, Stack size 16 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CoffeeAO_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coffee.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>CoffeeAO_ctor</STRONG> (ARM, 56 bytes, Stack size 8 bytes, coffee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CoffeeAO_ctor &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_ctor
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Alarm_on</STRONG> (ARM, 300 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Alarm_on &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>Alarm_off</STRONG> (ARM, 652 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Alarm_off &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>Alarm_initial</STRONG> (ARM, 28 bytes, Stack size 0 bytes, alarm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Alarm_ctor</STRONG> (ARM, 28 bytes, Stack size 8 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Alarm_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_ctor
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (ARM, 104 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; QF_poolInit &rArr; QMPool_init &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_ctor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[31]"></a>BSP_onKeyboardInput</STRONG> (ARM, 700 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_onKeyboardInput &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr0
</UL>

<P><STRONG><a name="[68]"></a>BSP_Init</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_Init &rArr; lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Wheel_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_0
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>BSP_display</STRONG> (ARM, 36 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[70]"></a>BSP_display_str</STRONG> (ARM, 28 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>BSP_exit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[8e]"></a>BSP_delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, qmbsp.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>BSP_boom</STRONG> (ARM, 28 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>BSP_LCD_display_str</STRONG> (ARM, 44 bytes, Stack size 16 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
</UL>

<P><STRONG><a name="[39]"></a>Q_onAssert</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getPoolMin
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_noTimeEvtsActiveX
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init_
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init_
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch_
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
</UL>

<P><STRONG><a name="[4d]"></a>QF_onCleanup</STRONG> (ARM, 4 bytes, Stack size 0 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
</UL>

<P><STRONG><a name="[50]"></a>QF_onIdle</STRONG> (ARM, 4 bytes, Stack size 0 bytes, qmbsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[4f]"></a>QF_onStartup</STRONG> (ARM, 4 bytes, Stack size 0 bytes, qmbsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_idivmod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_off (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_on (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h1 (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h2 (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu (via Veneer)
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_uldivmod</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[92]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[93]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>T_SWI_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>

<P><STRONG><a name="[7b]"></a>disable_irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>

<P><STRONG><a name="[7c]"></a>enable_irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>

<P><STRONG><a name="[7d]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[94]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[53]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_boom (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_exit (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_display_str (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_display (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_off (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_on (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_coffeePotToggle (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_timeBrewActivatedToggle (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_startBrewingNow (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_setBrewStrength (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_coffeemachine (via Veneer)
</UL>

<P><STRONG><a name="[7f]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[95]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[5a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_menu (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h1 (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoffeeAO_set_clock_h2 (via Veneer)
</UL>

<P><STRONG><a name="[80]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printf1.o(i.__ARM_common_call_via_r2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfb.o(i.__ARM_common_call_via_r6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[97]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd_4bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>

<P><STRONG><a name="[24]"></a>lcd_read_status</STRONG> (ARM, 188 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>

<P><STRONG><a name="[26]"></a>wait_while_busy</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[29]"></a>lcd_write_data</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[3a]"></a>QHsm_tran_</STRONG> (ARM, 576 bytes, Stack size 32 bytes, qhsm_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QHsm_tran_ &rArr; Q_onAssert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
</UL>

<P><STRONG><a name="[7e]"></a>_printf_core</STRONG> (Thumb, 1088 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[82]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
