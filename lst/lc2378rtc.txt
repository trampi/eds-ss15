; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lc2378rtc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lc2378rtc.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\lc2378rtc.crf bsp\lc2378rtc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Set_RTC PROC
;;;13     
;;;14     void Set_RTC(	 RTC_T* new_rtc) {
000000  e3a01000          MOV      r1,#0
;;;15     
;;;16      	 new_rtc->seconds = 0x00;
000004  e5c01000          STRB     r1,[r0,#0]
;;;17        	 new_rtc->minutes= 0x30;
000008  e3a01030          MOV      r1,#0x30
00000c  e5c01001          STRB     r1,[r0,#1]
;;;18     	 new_rtc->hours= 0xE;
000010  e3a0100e          MOV      r1,#0xe
000014  e5c01002          STRB     r1,[r0,#2]
;;;19       	 new_rtc->day_of_week= 0x03;
000018  e3a01003          MOV      r1,#3
00001c  e5c01003          STRB     r1,[r0,#3]
;;;20     	 new_rtc->day_of_month= 0x07;
000020  e3a01007          MOV      r1,#7
000024  e5c01004          STRB     r1,[r0,#4]
;;;21     	 new_rtc->month= 0x0C;
000028  e3a0100c          MOV      r1,#0xc
00002c  e5c01005          STRB     r1,[r0,#5]
;;;22          new_rtc->year = 2010;
000030  e59f11d0          LDR      r1,|L1.520|
000034  e1c010b6          STRH     r1,[r0,#6]
;;;23     
;;;24     
;;;25     }
000038  e12fff1e          BX       lr
;;;26     
                          ENDP

                  Write_RTC PROC
;;;27     void Write_RTC(RTC_T* new_rtc){
00003c  e59f11c8          LDR      r1,|L1.524|
;;;28     
;;;29     
;;;30     	
;;;31     
;;;32     	RTC_CCR &=  0x01; /* disable RTC */
000040  e5911008          LDR      r1,[r1,#8]
000044  e2011001          AND      r1,r1,#1
000048  e59f21bc          LDR      r2,|L1.524|
00004c  e5821008          STR      r1,[r2,#8]
;;;33     	RTC_SEC = new_rtc->seconds;
000050  e5d01000          LDRB     r1,[r0,#0]
000054  e5821020          STR      r1,[r2,#0x20]
;;;34     	RTC_MIN = new_rtc->minutes;
000058  e5d01001          LDRB     r1,[r0,#1]
00005c  e5821024          STR      r1,[r2,#0x24]
;;;35     	RTC_HOUR = new_rtc->hours;
000060  e5d01002          LDRB     r1,[r0,#2]
000064  e5821028          STR      r1,[r2,#0x28]
;;;36     	RTC_DOW = new_rtc->day_of_week;
000068  e5d01003          LDRB     r1,[r0,#3]
00006c  e5821030          STR      r1,[r2,#0x30]
;;;37     	RTC_DOM = new_rtc->day_of_month;
000070  e5d01004          LDRB     r1,[r0,#4]
000074  e582102c          STR      r1,[r2,#0x2c]
;;;38     	RTC_MONTH = new_rtc->month;
000078  e5d01005          LDRB     r1,[r0,#5]
00007c  e5821038          STR      r1,[r2,#0x38]
;;;39     	RTC_YEAR = new_rtc->year;
000080  e1d010b6          LDRH     r1,[r0,#6]
000084  e582103c          STR      r1,[r2,#0x3c]
;;;40     	RTC_DOY = new_rtc->day_of_year;
000088  e1d010b8          LDRH     r1,[r0,#8]
00008c  e5821034          STR      r1,[r2,#0x34]
;;;41     	RTC_CCR |= 0x01; /* enable RTC */
000090  e1a01002          MOV      r1,r2
000094  e5911008          LDR      r1,[r1,#8]
000098  e3811001          ORR      r1,r1,#1
00009c  e5821008          STR      r1,[r2,#8]
;;;42     
;;;43     
;;;44     
;;;45     
;;;46     }
0000a0  e12fff1e          BX       lr
;;;47     
                          ENDP

                  Read_RTC PROC
;;;49     /*****************************************************************************************/
;;;50     void Read_RTC(RTC_T* rtc){
0000a4  e59f1160          LDR      r1,|L1.524|
;;;51     
;;;52     
;;;53     rtc->seconds = ((RTC_CTIME0 & 0x0000003F)>> 0);
0000a8  e5911014          LDR      r1,[r1,#0x14]
0000ac  e201103f          AND      r1,r1,#0x3f
0000b0  e5c01000          STRB     r1,[r0,#0]
;;;54     rtc->minutes = ((RTC_CTIME0 & 0x00003F00)>> 8);
0000b4  e59f1150          LDR      r1,|L1.524|
0000b8  e5911014          LDR      r1,[r1,#0x14]
0000bc  e2011c3f          AND      r1,r1,#0x3f00
0000c0  e1a01421          LSR      r1,r1,#8
0000c4  e5c01001          STRB     r1,[r0,#1]
;;;55     rtc->hours = ((RTC_CTIME0 & 0x001F0000)>> 16);
0000c8  e59f113c          LDR      r1,|L1.524|
0000cc  e5911014          LDR      r1,[r1,#0x14]
0000d0  e201181f          AND      r1,r1,#0x1f0000
0000d4  e1a01821          LSR      r1,r1,#16
0000d8  e5c01002          STRB     r1,[r0,#2]
;;;56     rtc->day_of_week = ((RTC_CTIME0 & 0x07000000)>> 24);
0000dc  e59f1128          LDR      r1,|L1.524|
0000e0  e5911014          LDR      r1,[r1,#0x14]
0000e4  e2011407          AND      r1,r1,#0x7000000
0000e8  e1a01c21          LSR      r1,r1,#24
0000ec  e5c01003          STRB     r1,[r0,#3]
;;;57     rtc->day_of_month = ((RTC_CTIME1 & 0x0000001F)>> 0);
0000f0  e59f1114          LDR      r1,|L1.524|
0000f4  e5911018          LDR      r1,[r1,#0x18]
0000f8  e201101f          AND      r1,r1,#0x1f
0000fc  e5c01004          STRB     r1,[r0,#4]
;;;58     rtc->month = ((RTC_CTIME1 & 0x0000FF00)>> 8);
000100  e59f1104          LDR      r1,|L1.524|
000104  e5911018          LDR      r1,[r1,#0x18]
000108  e2011cff          AND      r1,r1,#0xff00
00010c  e1a01421          LSR      r1,r1,#8
000110  e5c01005          STRB     r1,[r0,#5]
;;;59     rtc->year = ((RTC_CTIME1 & 0x0FFF0000)>> 16);
000114  e59f10f0          LDR      r1,|L1.524|
000118  e5911018          LDR      r1,[r1,#0x18]
00011c  e59f20ec          LDR      r2,|L1.528|
000120  e0011002          AND      r1,r1,r2
000124  e1a01821          LSR      r1,r1,#16
000128  e1c010b6          STRH     r1,[r0,#6]
;;;60     rtc->day_of_year = ((RTC_CTIME2 & 0x00000FFF)>> 0);
00012c  e59f10d8          LDR      r1,|L1.524|
000130  e591101c          LDR      r1,[r1,#0x1c]
000134  e0011842          AND      r1,r1,r2,ASR #16
000138  e1c010b8          STRH     r1,[r0,#8]
;;;61     
;;;62     RTC_CCR |= 0x01;
00013c  e59f10c8          LDR      r1,|L1.524|
000140  e5911008          LDR      r1,[r1,#8]
000144  e3811001          ORR      r1,r1,#1
000148  e59f20bc          LDR      r2,|L1.524|
00014c  e5821008          STR      r1,[r2,#8]
;;;63     
;;;64     return;
;;;65     
;;;66     }
000150  e12fff1e          BX       lr
;;;67     /*****************************************************************************************/
                          ENDP

                  isr_rtc_event PROC
                  |L1.340|
;;;68     void isr_rtc_event(void) __irq {
000154  e92d0003          PUSH     {r0,r1}
;;;69     
;;;70     /* one secound RTC interrupt heandler*/
;;;71     if (RTC_ILR &=0x00000001){
000158  e59f00ac          LDR      r0,|L1.524|
00015c  e5900000          LDR      r0,[r0,#0]
000160  e2000001          AND      r0,r0,#1
000164  e59f10a0          LDR      r1,|L1.524|
000168  e5810000          STR      r0,[r1,#0]
00016c  e3500000          CMP      r0,#0
000170  0a000003          BEQ      |L1.388|
;;;72     RTC_ILR = 0x00000001;
000174  e3a00001          MOV      r0,#1
000178  e5810000          STR      r0,[r1,#0]
;;;73     rtc_update = 1;
00017c  e59f1090          LDR      r1,|L1.532|
000180  e5c10000          STRB     r0,[r1,#0]  ; rtc_update
                  |L1.388|
;;;74     }
;;;75     VICVectAddr = 0; /* Acknowledge Interrupt */
000184  e3a00000          MOV      r0,#0
000188  e5000100          STR      r0,[r0,#-0x100]
;;;76     }
00018c  e8bd0003          POP      {r0,r1}
000190  e25ef004          SUBS     pc,lr,#4
;;;77     /*****************************************************************************************/
                          ENDP

                  RtcInit PROC
;;;78     void RtcInit(){
000194  e59f007c          LDR      r0,|L1.536|
;;;79     
;;;80     RTC_PREINT = 0x016d;
000198  e59f106c          LDR      r1,|L1.524|
00019c  e5810080          STR      r0,[r1,#0x80]
;;;81     RTC_PREFRAC = 0x1680;
0001a0  e3a00d5a          MOV      r0,#0x1680
0001a4  e5810084          STR      r0,[r1,#0x84]
;;;82     PCONP |= 0x200; /* Enable power for RTC */
0001a8  e2810976          ADD      r0,r1,#0x1d8000
0001ac  e59000c4          LDR      r0,[r0,#0xc4]
0001b0  e3800c02          ORR      r0,r0,#0x200
0001b4  e2811976          ADD      r1,r1,#0x1d8000
0001b8  e58100c4          STR      r0,[r1,#0xc4]
;;;83     RTC_CCR = 0x012; /* CTC reset and select RTC clock from 32 Khz.oscillator 0x 0x12 */
0001bc  e3a00012          MOV      r0,#0x12
0001c0  e2411976          SUB      r1,r1,#0x1d8000
0001c4  e5810008          STR      r0,[r1,#8]
;;;84     RTC_ILR = 0xFF; /* Clear RTC interrupt register */
0001c8  e3a000ff          MOV      r0,#0xff
0001cc  e5810000          STR      r0,[r1,#0]
;;;85     RTC_AMR = 0xFF; /* Dasable all the alrams. */
0001d0  e5810010          STR      r0,[r1,#0x10]
;;;86     RTC_CISS = 0; /* Disable all subsecond interrupts. */
0001d4  e3a00000          MOV      r0,#0
0001d8  e5810040          STR      r0,[r1,#0x40]
;;;87     RTC_CCR = 0x01; /* Enable RTC */
0001dc  e3a00001          MOV      r0,#1
0001e0  e5810008          STR      r0,[r1,#8]
;;;88     RTC_CIIR = 0x01; /* Enable only second count interrupt. minute */
0001e4  e581000c          STR      r0,[r1,#0xc]
;;;89     
;;;90     VICVectAddr13 = (unsigned int)isr_rtc_event; /* Set Interrupt Vector */
0001e8  e24f009c          ADR      r0,|L1.340|
0001ec  e3a01000          MOV      r1,#0
0001f0  e5010ecc          STR      r0,[r1,#-0xecc]
;;;91     VICVectCntl13 = 13; /* use it for RTC Interrupt */
0001f4  e3a0000d          MOV      r0,#0xd
0001f8  e5010dcc          STR      r0,[r1,#-0xdcc]
;;;92     VICIntEnable = (1 << 13); /* Enable Interrupt */
0001fc  e3a00a02          MOV      r0,#0x2000
000200  e5010ff0          STR      r0,[r1,#-0xff0]
;;;93     }
000204  e12fff1e          BX       lr
;;;94     
                          ENDP

                  |L1.520|
                          DCD      0x000007da
                  |L1.524|
                          DCD      0xe0024000
                  |L1.528|
                          DCD      0x0fff0000
                  |L1.532|
                          DCD      rtc_update
                  |L1.536|
                          DCD      0x0000016d

                          AREA ||.data||, DATA, ALIGN=0

                  rtc_update
000000  00                DCB      0x00
