; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qeq_get.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qeq_get.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qeq_get.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qf\source\qeq_get.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QEQueue_get PROC
;;;69     */
;;;70     QEvt const *QEQueue_get(QEQueue * const me) {
000000  e92d4070          PUSH     {r4-r6,lr}
000004  e1a04000          MOV      r4,r0
;;;71         QEvt const *e;
;;;72         QF_CRIT_STAT_
;;;73     
;;;74         QF_CRIT_ENTRY_();
000008  ef0000fe          SVC      #0xfe
;;;75         e = me->frontEvt; /* always remove the event from the front location */
00000c  e5946000          LDR      r6,[r4,#0]
;;;76     
;;;77         /* was the queue not empty? */
;;;78         if (e != (QEvt const *)0) {
000010  e3560000          CMP      r6,#0
000014  0a00001d          BEQ      |L1.144|
;;;79             /* use a temporary variable to increment volatile me->nFree */
;;;80             QEQueueCtr nFree = me->nFree + (QEQueueCtr)1;
000018  e5940014          LDR      r0,[r4,#0x14]
00001c  e2805001          ADD      r5,r0,#1
;;;81             me->nFree = nFree; /* update the number of free */
000020  e5845014          STR      r5,[r4,#0x14]
;;;82     
;;;83             /* any events in the ring buffer? */
;;;84             if (nFree <= me->end) {
000024  e5940008          LDR      r0,[r4,#8]
000028  e1500005          CMP      r0,r5
00002c  3a00000c          BCC      |L1.100|
;;;85                 me->frontEvt = QF_PTR_AT_(me->ring, me->tail); /* get from tail */
000030  e5940004          LDR      r0,[r4,#4]
000034  e5941010          LDR      r1,[r4,#0x10]
000038  e7900101          LDR      r0,[r0,r1,LSL #2]
00003c  e5840000          STR      r0,[r4,#0]
;;;86                 if (me->tail == (QEQueueCtr)0) { /* need to wrap the tail? */
000040  e5940010          LDR      r0,[r4,#0x10]
000044  e3500000          CMP      r0,#0
000048  1a000001          BNE      |L1.84|
;;;87                     me->tail = me->end; /* wrap around */
00004c  e5940008          LDR      r0,[r4,#8]
000050  e5840010          STR      r0,[r4,#0x10]
                  |L1.84|
;;;88                 }
;;;89                 --me->tail;
000054  e5940010          LDR      r0,[r4,#0x10]
000058  e2400001          SUB      r0,r0,#1
00005c  e5840010          STR      r0,[r4,#0x10]
000060  ea000009          B        |L1.140|
                  |L1.100|
;;;90     
;;;91                 QS_BEGIN_NOCRIT_(QS_QF_EQUEUE_GET, QS_priv_.eqObjFilter, me)
;;;92                     QS_TIME_();           /* timestamp */
;;;93                     QS_SIG_(e->sig);      /* the signal of this event */
;;;94                     QS_OBJ_(me);          /* this queue object */
;;;95                     QS_2U8_(e->poolId_, e->refCtr_);/* pool Id & ref Count */
;;;96                     QS_EQC_(nFree);       /* number of free entries */
;;;97                 QS_END_NOCRIT_()
;;;98             }
;;;99             else {
;;;100                me->frontEvt = (QEvt const *)0; /* queue becomes empty */
000064  e3a00000          MOV      r0,#0
000068  e5840000          STR      r0,[r4,#0]
;;;101    
;;;102                /* all entries in the queue must be free (+1 for fronEvt) */
;;;103                Q_ASSERT_ID(110, nFree == (me->end + (QEQueueCtr)1));
00006c  e5940008          LDR      r0,[r4,#8]
000070  e2800001          ADD      r0,r0,#1
000074  e1500005          CMP      r0,r5
000078  1a000000          BNE      |L1.128|
00007c  ea000002          B        |L1.140|
                  |L1.128|
000080  e3a0106e          MOV      r1,#0x6e
000084  e59f0014          LDR      r0,|L1.160|
000088  ebfffffe          BL       Q_onAssert
                  |L1.140|
;;;104    
;;;105                QS_BEGIN_NOCRIT_(QS_QF_EQUEUE_GET_LAST, QS_priv_.eqObjFilter, me)
;;;106                    QS_TIME_();           /* timestamp */
;;;107                    QS_SIG_(e->sig);      /* the signal of this event */
;;;108                    QS_OBJ_(me);          /* this queue object */
;;;109                    QS_2U8_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
;;;110                QS_END_NOCRIT_()
;;;111            }
;;;112        }
00008c  e1a00000          MOV      r0,r0
                  |L1.144|
;;;113        QF_CRIT_EXIT_();
000090  ef0000ff          SVC      #0xff
;;;114        return e;
000094  e1a00006          MOV      r0,r6
000098  e8bd4070          POP      {r4-r6,lr}
;;;115    }
00009c  e12fff1e          BX       lr
                          ENDP

                  |L1.160|
                          DCD      Q_this_module_

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7165715f          DCB      0x71,0x65,0x71,0x5f
000004  67657400          DCB      0x67,0x65,0x74,0x00
