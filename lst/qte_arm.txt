; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qte_arm.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qte_arm.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qte_arm.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qf\source\qte_arm.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QTimeEvt_armX PROC
;;;79     */
;;;80     void QTimeEvt_armX(QTimeEvt * const me,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;81                        QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
;;;82     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a07002          MOV      r7,r2
;;;83         uint_fast8_t tickRate = (uint_fast8_t)me->super.refCtr_
000010  e5d40003          LDRB     r0,[r4,#3]
000014  e200607f          AND      r6,r0,#0x7f
;;;84                                     & (uint_fast8_t)0x7F;
;;;85         QTimeEvtCtr ctr = me->ctr;
000018  e1d480bc          LDRH     r8,[r4,#0xc]
;;;86         QF_CRIT_STAT_
;;;87     
;;;88         /** \pre the host AO must be valid, time evnet must be disarmed,
;;;89         * number of clock ticks cannot be zero, and the signal must be valid.
;;;90         */
;;;91         Q_REQUIRE_ID(100, (me->act != (void *)0)
00001c  e5940008          LDR      r0,[r4,#8]
000020  e3500000          CMP      r0,#0
000024  0a000009          BEQ      |L1.80|
000028  e3580000          CMP      r8,#0
00002c  1a000007          BNE      |L1.80|
000030  e3550000          CMP      r5,#0
000034  0a000005          BEQ      |L1.80|
000038  e3560002          CMP      r6,#2
00003c  2a000003          BCS      |L1.80|
000040  e1d400b0          LDRH     r0,[r4,#0]
000044  e3500004          CMP      r0,#4
000048  ba000000          BLT      |L1.80|
00004c  ea000002          B        |L1.92|
                  |L1.80|
000050  e3a01064          MOV      r1,#0x64
000054  e59f0050          LDR      r0,|L1.172|
000058  ebfffffe          BL       Q_onAssert
                  |L1.92|
;;;92                   && (ctr == (QTimeEvtCtr)0)
;;;93                   && (nTicks != (QTimeEvtCtr)0)
;;;94                   && (tickRate < (uint_fast8_t)QF_MAX_TICK_RATE)
;;;95                   && (me->super.sig >= (QSignal)Q_USER_SIG));
;;;96     
;;;97         QF_CRIT_ENTRY_();
00005c  ef0000fe          SVC      #0xfe
;;;98         me->ctr = nTicks;
000060  e1c450bc          STRH     r5,[r4,#0xc]
;;;99         me->interval = interval;
000064  e1c470be          STRH     r7,[r4,#0xe]
;;;100    
;;;101        /* is the time event unlinked?
;;;102        * NOTE: For the duration of a single clock tick of the specified tick
;;;103        * rate a time event can be disarmed and yet still linked into the list,
;;;104        * because un-linking is performed exclusively in the QF_tickX() function.
;;;105        */
;;;106        if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
000068  e5d40003          LDRB     r0,[r4,#3]
00006c  e2000080          AND      r0,r0,#0x80
000070  e3500000          CMP      r0,#0
000074  1a000009          BNE      |L1.160|
;;;107            me->super.refCtr_ |= (uint8_t)0x80;       /* mark as linked */
000078  e5d40003          LDRB     r0,[r4,#3]
00007c  e3800080          ORR      r0,r0,#0x80
000080  e5c40003          STRB     r0,[r4,#3]
;;;108    
;;;109            /* The time event is initially inserted into the separate
;;;110            * "freshly armed" link list based on QF_timeEvtHead_[tickRate].act.
;;;111            * Only later, inside the QF_tickX() function, the "freshly armed"
;;;112            * list is appended to the main list of armed time events based on
;;;113            * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
;;;114            * changes to the main list exclusively inside the QF_tickX()
;;;115            * function.
;;;116            */
;;;117            me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
000084  e59f0024          LDR      r0,|L1.176|
000088  e0800206          ADD      r0,r0,r6,LSL #4
00008c  e5900008          LDR      r0,[r0,#8]
000090  e5840004          STR      r0,[r4,#4]
;;;118            QF_timeEvtHead_[tickRate].act = me;
000094  e59f0014          LDR      r0,|L1.176|
000098  e0800206          ADD      r0,r0,r6,LSL #4
00009c  e5804008          STR      r4,[r0,#8]
                  |L1.160|
;;;119        }
;;;120    
;;;121        QS_BEGIN_NOCRIT_(QS_QF_TIMEEVT_ARM, QS_priv_.teObjFilter, me)
;;;122            QS_TIME_();                /* timestamp */
;;;123            QS_OBJ_(me);               /* this time event object */
;;;124            QS_OBJ_(me->act);          /* the active object */
;;;125            QS_TEC_(nTicks);           /* the number of ticks */
;;;126            QS_TEC_(interval);         /* the interval */
;;;127            QS_U8_((uint8_t)tickRate); /* tick rate */
;;;128        QS_END_NOCRIT_()
;;;129    
;;;130        QF_CRIT_EXIT_();
0000a0  ef0000ff          SVC      #0xff
;;;131    }
0000a4  e8bd41f0          POP      {r4-r8,lr}
0000a8  e12fff1e          BX       lr
                          ENDP

                  |L1.172|
                          DCD      Q_this_module_
                  |L1.176|
                          DCD      QF_timeEvtHead_

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7174655f          DCB      0x71,0x74,0x65,0x5f
000004  61726d00          DCB      0x61,0x72,0x6d,0x00
