; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qhsm_dis.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qhsm_dis.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qhsm_dis.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qep\source\qhsm_dis.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QHsm_tran_ PROC
;;;226    */
;;;227    static int_fast8_t QHsm_tran_(QHsm * const me,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;228                                  QStateHandler path[QHSM_MAX_NEST_DEPTH_])
;;;229    {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
;;;230        int_fast8_t ip = (int_fast8_t)(-1);/* transition entry path index */
00000c  e3e08000          MVN      r8,#0
;;;231        int_fast8_t iq; /* helper transition entry path index */
;;;232        QStateHandler t = path[0];
000010  e5967000          LDR      r7,[r6,#0]
;;;233        QStateHandler s = path[2];
000014  e5969008          LDR      r9,[r6,#8]
;;;234        QState r;
;;;235        QS_CRIT_STAT_
;;;236    
;;;237        /* (a) check source==target (transition to self)... */
;;;238        if (s == t) {
000018  e1590007          CMP      r9,r7
00001c  1a000007          BNE      |L1.64|
;;;239            QEP_EXIT_(s);        /* exit the source */
000020  e1a00000          MOV      r0,r0
000024  e59f13f8          LDR      r1,|L1.1060|
000028  e1a00005          MOV      r0,r5
00002c  e1a0e00f          MOV      lr,pc
000030  e12fff19          BX       r9
000034  e1a00000          MOV      r0,r0
;;;240            ip = (int_fast8_t)0; /* enter the target */
000038  e3a08000          MOV      r8,#0
00003c  ea00007c          B        |L1.564|
                  |L1.64|
;;;241        }
;;;242        else {
;;;243            (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of target */
000040  e59f13e0          LDR      r1,|L1.1064|
000044  e1a00005          MOV      r0,r5
000048  e1a0e00f          MOV      lr,pc
00004c  e12fff17          BX       r7
;;;244    
;;;245            t = me->temp.fun;
000050  e5957008          LDR      r7,[r5,#8]
;;;246    
;;;247            /* (b) check source==target->super... */
;;;248            if (s == t) {
000054  e1590007          CMP      r9,r7
000058  1a000001          BNE      |L1.100|
;;;249                ip = (int_fast8_t)0; /* enter the target */
00005c  e3a08000          MOV      r8,#0
000060  ea000073          B        |L1.564|
                  |L1.100|
;;;250            }
;;;251            else {
;;;252                (void)QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of src */
000064  e59f13bc          LDR      r1,|L1.1064|
000068  e1a00005          MOV      r0,r5
00006c  e1a0e00f          MOV      lr,pc
000070  e12fff19          BX       r9
;;;253    
;;;254                /* (c) check source->super==target->super... */
;;;255                if (me->temp.fun == t) {
000074  e5950008          LDR      r0,[r5,#8]
000078  e1500007          CMP      r0,r7
00007c  1a000007          BNE      |L1.160|
;;;256                    QEP_EXIT_(s);        /* exit the source */
000080  e1a00000          MOV      r0,r0
000084  e59f1398          LDR      r1,|L1.1060|
000088  e1a00005          MOV      r0,r5
00008c  e1a0e00f          MOV      lr,pc
000090  e12fff19          BX       r9
000094  e1a00000          MOV      r0,r0
;;;257                    ip = (int_fast8_t)0; /* enter the target */
000098  e3a08000          MOV      r8,#0
00009c  ea000064          B        |L1.564|
                  |L1.160|
;;;258                }
;;;259                else {
;;;260                    /* (d) check source->super==target... */
;;;261                    if (me->temp.fun == path[0]) {
0000a0  e5950008          LDR      r0,[r5,#8]
0000a4  e5961000          LDR      r1,[r6,#0]
0000a8  e1500001          CMP      r0,r1
0000ac  1a000005          BNE      |L1.200|
;;;262                        QEP_EXIT_(s); /* exit the source */
0000b0  e1a00000          MOV      r0,r0
0000b4  e59f1368          LDR      r1,|L1.1060|
0000b8  e1a00005          MOV      r0,r5
0000bc  e1a0e00f          MOV      lr,pc
0000c0  e12fff19          BX       r9
0000c4  ea00005a          B        |L1.564|
                  |L1.200|
;;;263                    }
;;;264                    else {
;;;265                        /* (e) check rest of source==target->super->super..
;;;266                        * and store the entry path along the way
;;;267                        */
;;;268                        iq = (int_fast8_t)0; /* indicate that LCA not found */
0000c8  e3a04000          MOV      r4,#0
;;;269                        ip = (int_fast8_t)1; /* enter target and its superstate */
0000cc  e3a08001          MOV      r8,#1
;;;270                        path[1] = t;         /* save the superstate of target */
0000d0  e5867004          STR      r7,[r6,#4]
;;;271                        t = me->temp.fun;    /* save source->super */
0000d4  e5957008          LDR      r7,[r5,#8]
;;;272    
;;;273                        /* find target->super->super... */
;;;274                        r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
0000d8  e59f1348          LDR      r1,|L1.1064|
0000dc  e1a00005          MOV      r0,r5
0000e0  e5962004          LDR      r2,[r6,#4]
0000e4  e1a0e00f          MOV      lr,pc
0000e8  e12fff12          BX       r2
0000ec  e1a0a000          MOV      r10,r0
;;;275                        while (r == (QState)Q_RET_SUPER) {
0000f0  ea000015          B        |L1.332|
                  |L1.244|
;;;276                            ++ip;
0000f4  e2888001          ADD      r8,r8,#1
;;;277                            path[ip] = me->temp.fun; /* store the entry path */
0000f8  e5950008          LDR      r0,[r5,#8]
0000fc  e7860108          STR      r0,[r6,r8,LSL #2]
;;;278                            if (me->temp.fun == s) { /* is it the source? */
000100  e5950008          LDR      r0,[r5,#8]
000104  e1500009          CMP      r0,r9
000108  1a000009          BNE      |L1.308|
;;;279                                iq = (int_fast8_t)1; /* indicate that LCA found */
00010c  e3a04001          MOV      r4,#1
;;;280    
;;;281                                /* entry path must not overflow */
;;;282                                Q_ASSERT_ID(210,
000110  e3580006          CMP      r8,#6
000114  aa000000          BGE      |L1.284|
000118  ea000002          B        |L1.296|
                  |L1.284|
00011c  e3a010d2          MOV      r1,#0xd2
000120  e59f0304          LDR      r0,|L1.1068|
000124  ebfffffe          BL       Q_onAssert
                  |L1.296|
;;;283                                          ip < (int_fast8_t)QHSM_MAX_NEST_DEPTH_);
;;;284                                --ip; /* do not enter the source */
000128  e2488001          SUB      r8,r8,#1
;;;285                                r = (QState)Q_RET_HANDLED; /* terminate loop */
00012c  e3a0a003          MOV      r10,#3
000130  ea000005          B        |L1.332|
                  |L1.308|
;;;286                            }
;;;287                             /* it is not the source, keep going up */
;;;288                            else {
;;;289                                r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
000134  e59f12ec          LDR      r1,|L1.1064|
000138  e5952008          LDR      r2,[r5,#8]
00013c  e1a00005          MOV      r0,r5
000140  e1a0e00f          MOV      lr,pc
000144  e12fff12          BX       r2
000148  e1a0a000          MOV      r10,r0
                  |L1.332|
00014c  e35a0000          CMP      r10,#0                ;275
000150  0affffe7          BEQ      |L1.244|
;;;290                            }
;;;291                        }
;;;292    
;;;293                        /* the LCA not found yet? */
;;;294                        if (iq == (int_fast8_t)0) {
000154  e3540000          CMP      r4,#0
000158  1a000035          BNE      |L1.564|
;;;295    
;;;296                            /* entry path must not overflow */
;;;297                            Q_ASSERT_ID(220,
00015c  e3580006          CMP      r8,#6
000160  aa000000          BGE      |L1.360|
000164  ea000002          B        |L1.372|
                  |L1.360|
000168  e3a010dc          MOV      r1,#0xdc
00016c  e59f02b8          LDR      r0,|L1.1068|
000170  ebfffffe          BL       Q_onAssert
                  |L1.372|
;;;298                                        ip < (int_fast8_t)QHSM_MAX_NEST_DEPTH_);
;;;299    
;;;300                            QEP_EXIT_(s); /* exit the source */
000174  e1a00000          MOV      r0,r0
000178  e59f12a4          LDR      r1,|L1.1060|
00017c  e1a00005          MOV      r0,r5
000180  e1a0e00f          MOV      lr,pc
000184  e12fff19          BX       r9
000188  e1a00000          MOV      r0,r0
;;;301    
;;;302                            /* (f) check the rest of source->super
;;;303                            *                  == target->super->super...
;;;304                            */
;;;305                            iq = ip;
00018c  e1a04008          MOV      r4,r8
;;;306                            r = (QState)Q_RET_IGNORED; /* LCA NOT found */
000190  e3a0a004          MOV      r10,#4
;;;307                            do {
000194  e1a00000          MOV      r0,r0
                  |L1.408|
;;;308                                if (t == path[iq]) { /* is this the LCA? */
000198  e7960104          LDR      r0,[r6,r4,LSL #2]
00019c  e1500007          CMP      r0,r7
0001a0  1a000003          BNE      |L1.436|
;;;309                                    r = (QState)Q_RET_HANDLED; /* LCA found */
0001a4  e3a0a003          MOV      r10,#3
;;;310    
;;;311                                    /* do not enter LCA */
;;;312                                    ip = (int_fast8_t)(iq - (int_fast8_t)1);
0001a8  e2448001          SUB      r8,r4,#1
;;;313                                    iq = (int_fast8_t)(-1);/*terminate the loop */
0001ac  e3e04000          MVN      r4,#0
0001b0  ea000000          B        |L1.440|
                  |L1.436|
;;;314                                }
;;;315                                else {
;;;316                                    --iq; /* try lower superstate of target */
0001b4  e2444001          SUB      r4,r4,#1
                  |L1.440|
;;;317                                }
;;;318                            } while (iq >= (int_fast8_t)0);
0001b8  e3540000          CMP      r4,#0
0001bc  aafffff5          BGE      |L1.408|
;;;319    
;;;320                            /* not found? */
;;;321                            if (r != (QState)Q_RET_HANDLED) {
0001c0  e35a0003          CMP      r10,#3
0001c4  0a00001a          BEQ      |L1.564|
;;;322                                /* (g) check each source->super->...
;;;323                                * for each target->super...
;;;324                                */
;;;325                                r = (QState)Q_RET_IGNORED; /* keep looping */
0001c8  e3a0a004          MOV      r10,#4
;;;326                                do {
0001cc  e1a00000          MOV      r0,r0
                  |L1.464|
;;;327                                    /* exit t unhandled? */
;;;328                                    if (QEP_TRIG_(t, Q_EXIT_SIG)
0001d0  e59f124c          LDR      r1,|L1.1060|
0001d4  e1a00005          MOV      r0,r5
0001d8  e1a0e00f          MOV      lr,pc
0001dc  e12fff17          BX       r7
0001e0  e3500003          CMP      r0,#3
0001e4  1a000003          BNE      |L1.504|
;;;329                                        == (QState)Q_RET_HANDLED)
;;;330                                    {
;;;331                                        QS_BEGIN_(QS_QEP_STATE_EXIT,
;;;332                                                  QS_priv_.smObjFilter, me)
;;;333                                            QS_OBJ_(me);
;;;334                                            QS_FUN_(t);
;;;335                                        QS_END_()
;;;336    
;;;337                                        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
0001e8  e59f1238          LDR      r1,|L1.1064|
0001ec  e1a00005          MOV      r0,r5
0001f0  e1a0e00f          MOV      lr,pc
0001f4  e12fff17          BX       r7
                  |L1.504|
;;;338                                    }
;;;339                                    t = me->temp.fun; /* set to super of t */
0001f8  e5957008          LDR      r7,[r5,#8]
;;;340                                    iq = ip;
0001fc  e1a04008          MOV      r4,r8
;;;341                                    do {
000200  e1a00000          MOV      r0,r0
                  |L1.516|
;;;342                                        /* is this LCA? */
;;;343                                        if (t == path[iq]) {
000204  e7960104          LDR      r0,[r6,r4,LSL #2]
000208  e1500007          CMP      r0,r7
00020c  1a000003          BNE      |L1.544|
;;;344                                            /* do not enter LCA */
;;;345                                            ip = (int_fast8_t)(iq-(int_fast8_t)1);
000210  e2448001          SUB      r8,r4,#1
;;;346                                            /* cause breaking out of inner loop */
;;;347                                            iq = (int_fast8_t)(-1);
000214  e3e04000          MVN      r4,#0
;;;348                                            r = (QState)Q_RET_HANDLED;
000218  e3a0a003          MOV      r10,#3
00021c  ea000000          B        |L1.548|
                  |L1.544|
;;;349                                        }
;;;350                                        else {
;;;351                                            --iq;
000220  e2444001          SUB      r4,r4,#1
                  |L1.548|
;;;352                                        }
;;;353                                    } while (iq >= (int_fast8_t)0);
000224  e3540000          CMP      r4,#0
000228  aafffff5          BGE      |L1.516|
;;;354                                } while (r != (QState)Q_RET_HANDLED);
00022c  e35a0003          CMP      r10,#3
000230  1affffe6          BNE      |L1.464|
                  |L1.564|
;;;355                            }
;;;356                        }
;;;357                    }
;;;358                }
;;;359            }
;;;360        }
;;;361        return ip;
000234  e1a00008          MOV      r0,r8
000238  e8bd47f0          POP      {r4-r10,lr}
;;;362    }
00023c  e12fff1e          BX       lr
                          ENDP

                  QHsm_dispatch_ PROC
;;;69     */
;;;70     void QHsm_dispatch_(QHsm * const me, QEvt const * const e) {
000240  e92d43f0          PUSH     {r4-r9,lr}
000244  e24dd01c          SUB      sp,sp,#0x1c
000248  e1a04000          MOV      r4,r0
00024c  e1a09001          MOV      r9,r1
;;;71         QStateHandler t = me->state.fun;
000250  e5946004          LDR      r6,[r4,#4]
;;;72         QStateHandler s;
;;;73         QState r;
;;;74         QS_CRIT_STAT_
;;;75     
;;;76         /** \pre the state configuration must be stable */
;;;77         Q_REQUIRE_ID(100, t == me->temp.fun);
000254  e5940008          LDR      r0,[r4,#8]
000258  e1500006          CMP      r0,r6
00025c  1a000000          BNE      |L1.612|
000260  ea000002          B        |L1.624|
                  |L1.612|
000264  e3a01064          MOV      r1,#0x64
000268  e59f01bc          LDR      r0,|L1.1068|
00026c  ebfffffe          BL       Q_onAssert
                  |L1.624|
;;;78     
;;;79         QS_BEGIN_(QS_QEP_DISPATCH, QS_priv_.smObjFilter, me)
;;;80             QS_TIME_();         /* time stamp */
;;;81             QS_SIG_(e->sig);    /* the signal of the event */
;;;82             QS_OBJ_(me);        /* this state machine object */
;;;83             QS_FUN_(t);         /* the current state */
;;;84         QS_END_()
;;;85     
;;;86         /* process the event hierarchically... */
;;;87         do {
000270  e1a00000          MOV      r0,r0
                  |L1.628|
;;;88             s = me->temp.fun;
000274  e5947008          LDR      r7,[r4,#8]
;;;89             r = (*s)(me, e); /* invoke state handler s */
000278  e1a01009          MOV      r1,r9
00027c  e1a00004          MOV      r0,r4
000280  e1a0e00f          MOV      lr,pc
000284  e12fff17          BX       r7
000288  e1a08000          MOV      r8,r0
;;;90     
;;;91             if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
00028c  e3580002          CMP      r8,#2
000290  1a000004          BNE      |L1.680|
;;;92     
;;;93                 QS_BEGIN_(QS_QEP_UNHANDLED, QS_priv_.smObjFilter, me)
;;;94                     QS_SIG_(e->sig); /* the signal of the event */
;;;95                     QS_OBJ_(me);     /* this state machine object */
;;;96                     QS_FUN_(s);      /* the current state */
;;;97                 QS_END_()
;;;98     
;;;99                 r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
000294  e59f118c          LDR      r1,|L1.1064|
000298  e1a00004          MOV      r0,r4
00029c  e1a0e00f          MOV      lr,pc
0002a0  e12fff17          BX       r7
0002a4  e1a08000          MOV      r8,r0
                  |L1.680|
;;;100            }
;;;101        } while (r == (QState)Q_RET_SUPER);
0002a8  e3580000          CMP      r8,#0
0002ac  0afffff0          BEQ      |L1.628|
;;;102    
;;;103        /* transition taken? */
;;;104        if (r >= (QState)Q_RET_TRAN) {
0002b0  e3580008          CMP      r8,#8
0002b4  3a000055          BCC      |L1.1040|
;;;105            QStateHandler path[QHSM_MAX_NEST_DEPTH_];
;;;106            int_fast8_t ip;
;;;107    
;;;108            path[0] = me->temp.fun; /* save the target of the transition */
0002b8  e5940008          LDR      r0,[r4,#8]
0002bc  e58d0004          STR      r0,[sp,#4]
;;;109            path[1] = t;
0002c0  e58d6008          STR      r6,[sp,#8]
;;;110            path[2] = s;
0002c4  e58d700c          STR      r7,[sp,#0xc]
;;;111    
;;;112            /* exit current state to transition source s... */
;;;113            for (; t != s; t = me->temp.fun) {
0002c8  ea00000a          B        |L1.760|
                  |L1.716|
;;;114                if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
0002cc  e59f1150          LDR      r1,|L1.1060|
0002d0  e1a00004          MOV      r0,r4
0002d4  e1a0e00f          MOV      lr,pc
0002d8  e12fff16          BX       r6
0002dc  e3500003          CMP      r0,#3
0002e0  1a000003          BNE      |L1.756|
;;;115                    QS_BEGIN_(QS_QEP_STATE_EXIT, QS_priv_.smObjFilter, me)
;;;116                        QS_OBJ_(me); /* this state machine object */
;;;117                        QS_FUN_(t);  /* the exited state */
;;;118                    QS_END_()
;;;119    
;;;120                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
0002e4  e59f113c          LDR      r1,|L1.1064|
0002e8  e1a00004          MOV      r0,r4
0002ec  e1a0e00f          MOV      lr,pc
0002f0  e12fff16          BX       r6
                  |L1.756|
0002f4  e5946008          LDR      r6,[r4,#8]            ;113
                  |L1.760|
0002f8  e1560007          CMP      r6,r7                 ;113
0002fc  1afffff2          BNE      |L1.716|
;;;121                }
;;;122            }
;;;123    
;;;124            ip = QHsm_tran_(me, path);
000300  e28d1004          ADD      r1,sp,#4
000304  e1a00004          MOV      r0,r4
000308  ebfffffe          BL       QHsm_tran_
00030c  e1a05000          MOV      r5,r0
;;;125    
;;;126    #ifdef Q_SPY
;;;127            if (r == (QState)Q_RET_TRAN_HIST) {
;;;128    
;;;129                QS_BEGIN_(QS_QEP_TRAN_HIST, QS_priv_.smObjFilter, me)
;;;130                    QS_OBJ_(me);     /* this state machine object */
;;;131                    QS_FUN_(t);      /* the source of the transition */
;;;132                    QS_FUN_(path[0]);/* the target of the tran. to history */
;;;133                QS_END_()
;;;134    
;;;135            }
;;;136    #endif /* Q_SPY */
;;;137    
;;;138            /* retrace the entry path in reverse (desired) order... */
;;;139            for (; ip >= (int_fast8_t)0; --ip) {
000310  ea000008          B        |L1.824|
                  |L1.788|
;;;140                QEP_ENTER_(path[ip]);  /* enter path[ip] */
000314  e1a00000          MOV      r0,r0
000318  e28d0004          ADD      r0,sp,#4
00031c  e7902105          LDR      r2,[r0,r5,LSL #2]
000320  e59f1108          LDR      r1,|L1.1072|
000324  e1a00004          MOV      r0,r4
000328  e1a0e00f          MOV      lr,pc
00032c  e12fff12          BX       r2
000330  e1a00000          MOV      r0,r0
000334  e2455001          SUB      r5,r5,#1              ;139
                  |L1.824|
000338  e3550000          CMP      r5,#0                 ;139
00033c  aafffff4          BGE      |L1.788|
;;;141            }
;;;142    
;;;143            t = path[0]; /* stick the target into register */
000340  e59d6004          LDR      r6,[sp,#4]
;;;144            me->temp.fun = t; /* update the next state */
000344  e5846008          STR      r6,[r4,#8]
;;;145    
;;;146            /* drill into the target hierarchy... */
;;;147            while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
000348  ea000029          B        |L1.1012|
                  |L1.844|
;;;148    
;;;149                QS_BEGIN_(QS_QEP_STATE_INIT, QS_priv_.smObjFilter, me)
;;;150                    QS_OBJ_(me); /* this state machine object */
;;;151                    QS_FUN_(t);  /* the source (pseudo)state */
;;;152                    QS_FUN_(me->temp.fun); /* the target of the transition */
;;;153                QS_END_()
;;;154    
;;;155                ip = (int_fast8_t)0;
00034c  e3a05000          MOV      r5,#0
;;;156                path[0] = me->temp.fun;
000350  e5940008          LDR      r0,[r4,#8]
000354  e58d0004          STR      r0,[sp,#4]
;;;157    
;;;158                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
000358  e59f10c8          LDR      r1,|L1.1064|
00035c  e5942008          LDR      r2,[r4,#8]
000360  e1a00004          MOV      r0,r4
000364  e1a0e00f          MOV      lr,pc
000368  e12fff12          BX       r2
;;;159    
;;;160                while (me->temp.fun != t) {
00036c  ea000008          B        |L1.916|
                  |L1.880|
;;;161                    ++ip;
000370  e2855001          ADD      r5,r5,#1
;;;162                    path[ip] = me->temp.fun;
000374  e28d1004          ADD      r1,sp,#4
000378  e5940008          LDR      r0,[r4,#8]
00037c  e7810105          STR      r0,[r1,r5,LSL #2]
;;;163                    (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
000380  e59f10a0          LDR      r1,|L1.1064|
000384  e5942008          LDR      r2,[r4,#8]
000388  e1a00004          MOV      r0,r4
00038c  e1a0e00f          MOV      lr,pc
000390  e12fff12          BX       r2
                  |L1.916|
000394  e5940008          LDR      r0,[r4,#8]            ;160
000398  e1500006          CMP      r0,r6                 ;160
00039c  1afffff3          BNE      |L1.880|
;;;164                }
;;;165                me->temp.fun = path[0];
0003a0  e59d0004          LDR      r0,[sp,#4]
0003a4  e5840008          STR      r0,[r4,#8]
;;;166    
;;;167                /* entry path must not overflow */
;;;168                Q_ASSERT_ID(110, ip < (int_fast8_t)QHSM_MAX_NEST_DEPTH_);
0003a8  e3550006          CMP      r5,#6
0003ac  aa000000          BGE      |L1.948|
0003b0  ea000002          B        |L1.960|
                  |L1.948|
0003b4  e3a0106e          MOV      r1,#0x6e
0003b8  e59f006c          LDR      r0,|L1.1068|
0003bc  ebfffffe          BL       Q_onAssert
                  |L1.960|
;;;169    
;;;170                /* retrace the entry path in reverse (correct) order... */
;;;171                do {
0003c0  e1a00000          MOV      r0,r0
                  |L1.964|
;;;172                    QEP_ENTER_(path[ip]); /* enter path[ip] */
0003c4  e1a00000          MOV      r0,r0
0003c8  e28d0004          ADD      r0,sp,#4
0003cc  e7902105          LDR      r2,[r0,r5,LSL #2]
0003d0  e59f1058          LDR      r1,|L1.1072|
0003d4  e1a00004          MOV      r0,r4
0003d8  e1a0e00f          MOV      lr,pc
0003dc  e12fff12          BX       r2
0003e0  e1a00000          MOV      r0,r0
;;;173                    --ip;
0003e4  e2455001          SUB      r5,r5,#1
;;;174                } while (ip >= (int_fast8_t)0);
0003e8  e3550000          CMP      r5,#0
0003ec  aafffff4          BGE      |L1.964|
;;;175    
;;;176                t = path[0]; /* current state becomes the new source */
0003f0  e59d6004          LDR      r6,[sp,#4]
                  |L1.1012|
0003f4  e59f1038          LDR      r1,|L1.1076|
0003f8  e1a00004          MOV      r0,r4                 ;147
0003fc  e1a0e00f          MOV      lr,pc                 ;147
000400  e12fff16          BX       r6                    ;147
000404  e3500008          CMP      r0,#8                 ;147
000408  0affffcf          BEQ      |L1.844|
;;;177            }
;;;178    
;;;179            QS_BEGIN_(QS_QEP_TRAN, QS_priv_.smObjFilter, me)
;;;180                QS_TIME_();          /* time stamp */
;;;181                QS_SIG_(e->sig);     /* the signal of the event */
;;;182                QS_OBJ_(me);         /* this state machine object */
;;;183                QS_FUN_(s);          /* the source of the transition */
;;;184                QS_FUN_(t);          /* the new active state */
;;;185            QS_END_()
;;;186        }
00040c  e1a00000          MOV      r0,r0
                  |L1.1040|
;;;187    
;;;188    #ifdef Q_SPY
;;;189        else if (r == (QState)Q_RET_HANDLED) {
;;;190    
;;;191            QS_BEGIN_(QS_QEP_INTERN_TRAN, QS_priv_.smObjFilter, me)
;;;192                QS_TIME_();          /* time stamp */
;;;193                QS_SIG_(e->sig);     /* the signal of the event */
;;;194                QS_OBJ_(me);         /* this state machine object */
;;;195                QS_FUN_(s);          /* the source state */
;;;196            QS_END_()
;;;197    
;;;198        }
;;;199        else {
;;;200    
;;;201            QS_BEGIN_(QS_QEP_IGNORED, QS_priv_.smObjFilter, me)
;;;202                QS_TIME_();          /* time stamp */
;;;203                QS_SIG_(e->sig);     /* the signal of the event */
;;;204                QS_OBJ_(me);         /* this state machine object */
;;;205                QS_FUN_(me->state.fun); /* the current state */
;;;206            QS_END_()
;;;207    
;;;208        }
;;;209    #endif /* Q_SPY */
;;;210    
;;;211        me->state.fun = t; /* change the current active state */
000410  e5846004          STR      r6,[r4,#4]
;;;212        me->temp.fun  = t; /* mark the configuration as stable */
000414  e5846008          STR      r6,[r4,#8]
;;;213    }
000418  e28dd01c          ADD      sp,sp,#0x1c
00041c  e8bd43f0          POP      {r4-r9,lr}
000420  e12fff1e          BX       lr
;;;214    
                          ENDP

                  |L1.1060|
                          DCD      QEP_reservedEvt_+0x8
                  |L1.1064|
                          DCD      QEP_reservedEvt_
                  |L1.1068|
                          DCD      Q_this_module_
                  |L1.1072|
                          DCD      QEP_reservedEvt_+0x4
                  |L1.1076|
                          DCD      QEP_reservedEvt_+0xc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7168736d          DCB      0x71,0x68,0x73,0x6d
000004  5f646973          DCB      0x5f,0x64,0x69,0x73
000008  00                DCB      0x00
