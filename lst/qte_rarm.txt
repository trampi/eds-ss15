; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qte_rarm.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qte_rarm.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qte_rarm.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qf\source\qte_rarm.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QTimeEvt_rearm PROC
;;;74     */
;;;75     bool QTimeEvt_rearm(QTimeEvt * const me, QTimeEvtCtr const nTicks) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;76         uint_fast8_t tickRate = (uint_fast8_t)me->super.refCtr_
00000c  e5d40003          LDRB     r0,[r4,#3]
000010  e200607f          AND      r6,r0,#0x7f
;;;77                                 & (uint_fast8_t)0x7F;
;;;78         bool isArmed;
;;;79         QF_CRIT_STAT_
;;;80     
;;;81         /** \pre AO must be valid, tick rate must be in range, nTicks must not
;;;82         * be zero, and the signal of this time event must be valid
;;;83         */
;;;84         Q_REQUIRE_ID(100, (me->act != (void *)0)
000014  e5940008          LDR      r0,[r4,#8]
000018  e3500000          CMP      r0,#0
00001c  0a000007          BEQ      |L1.64|
000020  e3560002          CMP      r6,#2
000024  2a000005          BCS      |L1.64|
000028  e3550000          CMP      r5,#0
00002c  0a000003          BEQ      |L1.64|
000030  e1d400b0          LDRH     r0,[r4,#0]
000034  e3500004          CMP      r0,#4
000038  ba000000          BLT      |L1.64|
00003c  ea000002          B        |L1.76|
                  |L1.64|
000040  e3a01064          MOV      r1,#0x64
000044  e59f0068          LDR      r0,|L1.180|
000048  ebfffffe          BL       Q_onAssert
                  |L1.76|
;;;85                           && (tickRate < (uint_fast8_t)QF_MAX_TICK_RATE)
;;;86                           && (nTicks != (QTimeEvtCtr)0)
;;;87                           && (me->super.sig >= (QSignal)Q_USER_SIG));
;;;88     
;;;89         QF_CRIT_ENTRY_();
00004c  ef0000fe          SVC      #0xfe
;;;90     
;;;91         /* is the time evt not running? */
;;;92         if (me->ctr == (QTimeEvtCtr)0) {
000050  e1d400bc          LDRH     r0,[r4,#0xc]
000054  e3500000          CMP      r0,#0
000058  1a00000f          BNE      |L1.156|
;;;93             isArmed = false;
00005c  e3a07000          MOV      r7,#0
;;;94     
;;;95             /* is the time event unlinked?
;;;96             * NOTE: For a duration of a single clock tick of the specified
;;;97             * tick rate a time event can be disarmed and yet still linked into
;;;98             * the list, because unlinking is performed exclusively in the
;;;99             * QF_tickX() function.
;;;100            */
;;;101            if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
000060  e5d40003          LDRB     r0,[r4,#3]
000064  e2000080          AND      r0,r0,#0x80
000068  e3500000          CMP      r0,#0
00006c  1a00000b          BNE      |L1.160|
;;;102                me->super.refCtr_ |= (uint8_t)0x80;  /* mark as linked */
000070  e5d40003          LDRB     r0,[r4,#3]
000074  e3800080          ORR      r0,r0,#0x80
000078  e5c40003          STRB     r0,[r4,#3]
;;;103    
;;;104                /* The time event is initially inserted into the separate
;;;105                * "freshly armed" list based on QF_timeEvtHead_[tickRate].act.
;;;106                * Only later, inside the QF_tickX() function, the "freshly armed"
;;;107                * list is appended to the main list of armed time events based on
;;;108                * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
;;;109                * changes to the main list exclusively inside the QF_tickX()
;;;110                * function.
;;;111                */
;;;112                me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
00007c  e59f0034          LDR      r0,|L1.184|
000080  e0800206          ADD      r0,r0,r6,LSL #4
000084  e5900008          LDR      r0,[r0,#8]
000088  e5840004          STR      r0,[r4,#4]
;;;113                QF_timeEvtHead_[tickRate].act = me;
00008c  e59f0024          LDR      r0,|L1.184|
000090  e0800206          ADD      r0,r0,r6,LSL #4
000094  e5804008          STR      r4,[r0,#8]
000098  ea000000          B        |L1.160|
                  |L1.156|
;;;114            }
;;;115        }
;;;116        /* the time event is armed */
;;;117        else {
;;;118            isArmed = true;
00009c  e3a07001          MOV      r7,#1
                  |L1.160|
;;;119        }
;;;120        me->ctr = nTicks; /* re-load the tick counter (shift the phasing) */
0000a0  e1c450bc          STRH     r5,[r4,#0xc]
;;;121    
;;;122        QS_BEGIN_NOCRIT_(QS_QF_TIMEEVT_REARM, QS_priv_.teObjFilter, me)
;;;123            QS_TIME_();            /* timestamp */
;;;124            QS_OBJ_(me);           /* this time event object */
;;;125            QS_OBJ_(me->act);      /* the target AO */
;;;126            QS_TEC_(me->ctr);      /* the number of ticks */
;;;127            QS_TEC_(me->interval); /* the interval */
;;;128            QS_2U8_((uint8_t)tickRate, (uint8_t)isArmed);
;;;129        QS_END_NOCRIT_()
;;;130    
;;;131        QF_CRIT_EXIT_();
0000a4  ef0000ff          SVC      #0xff
;;;132        return isArmed;
0000a8  e1a00007          MOV      r0,r7
0000ac  e8bd41f0          POP      {r4-r8,lr}
;;;133    }
0000b0  e12fff1e          BX       lr
                          ENDP

                  |L1.180|
                          DCD      Q_this_module_
                  |L1.184|
                          DCD      QF_timeEvtHead_

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7174655f          DCB      0x71,0x74,0x65,0x5f
000004  7261726d          DCB      0x72,0x61,0x72,0x6d
000008  00                DCB      0x00
