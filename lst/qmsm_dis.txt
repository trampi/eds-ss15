; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qmsm_dis.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qmsm_dis.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qmsm_dis.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qep\source\qmsm_dis.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QMsm_execTatbl_ PROC
;;;237    */
;;;238    QState QMsm_execTatbl_(QMsm * const me, QMTranActTable const *tatbl) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;239        QActionHandler const *a;
;;;240        QState r = (QState)Q_RET_NULL;
00000c  e3a07007          MOV      r7,#7
;;;241        QS_CRIT_STAT_
;;;242    
;;;243        /** \pre the transition-action table pointer must not be NULL */
;;;244        Q_REQUIRE_ID(200, tatbl != (QMTranActTable const *)0);
000010  e3550000          CMP      r5,#0
000014  0a000000          BEQ      |L1.28|
000018  ea000002          B        |L1.40|
                  |L1.28|
00001c  e3a010c8          MOV      r1,#0xc8
000020  e59f0358          LDR      r0,|L1.896|
000024  ebfffffe          BL       Q_onAssert
                  |L1.40|
;;;245    
;;;246        for (a = &tatbl->act[0]; *a != Q_ACTION_CAST(0); QEP_ACT_PTR_INC_(a)) {
000028  e2856004          ADD      r6,r5,#4
00002c  ea000005          B        |L1.72|
                  |L1.48|
;;;247            r = (*(*a))(me); /* call the action through the 'a' pointer */
000030  e1a00004          MOV      r0,r4
000034  e5961000          LDR      r1,[r6,#0]
000038  e1a0e00f          MOV      lr,pc
00003c  e12fff11          BX       r1
000040  e1a07000          MOV      r7,r0
000044  e2866004          ADD      r6,r6,#4              ;246
                  |L1.72|
000048  e5960000          LDR      r0,[r6,#0]            ;246
00004c  e3500000          CMP      r0,#0                 ;246
000050  1afffff6          BNE      |L1.48|
;;;248    #ifdef Q_SPY
;;;249            if (r == (QState)Q_RET_ENTRY) {
;;;250    
;;;251                QS_BEGIN_(QS_QEP_STATE_ENTRY, QS_priv_.smObjFilter, me)
;;;252                    QS_OBJ_(me); /* this state machine object */
;;;253                    QS_FUN_(me->temp.obj->stateHandler);/*entered state handler */
;;;254                QS_END_()
;;;255            }
;;;256            else if (r == (QState)Q_RET_EXIT) {
;;;257    
;;;258                QS_BEGIN_(QS_QEP_STATE_EXIT, QS_priv_.smObjFilter, me)
;;;259                    QS_OBJ_(me); /* this state machine object */
;;;260                    QS_FUN_(me->temp.obj->stateHandler); /* exited state handler*/
;;;261                QS_END_()
;;;262            }
;;;263            else if (r == (QState)Q_RET_TRAN_INIT) {
;;;264    
;;;265                QS_BEGIN_(QS_QEP_STATE_INIT, QS_priv_.smObjFilter, me)
;;;266                    QS_OBJ_(me); /* this state machine object */
;;;267                    QS_FUN_(tatbl->target->stateHandler);         /* source */
;;;268                    QS_FUN_(me->temp.tatbl->target->stateHandler);/* target */
;;;269                QS_END_()
;;;270            }
;;;271            else if (r == (QState)Q_RET_TRAN_EP) {
;;;272    
;;;273                QS_BEGIN_(QS_QEP_TRAN_EP, QS_priv_.smObjFilter, me)
;;;274                    QS_OBJ_(me); /* this state machine object */
;;;275                    QS_FUN_(tatbl->target->stateHandler);         /* source */
;;;276                    QS_FUN_(me->temp.tatbl->target->stateHandler);/* target */
;;;277                QS_END_()
;;;278            }
;;;279            else if (r == (QState)Q_RET_TRAN_XP) {
;;;280    
;;;281                QS_BEGIN_(QS_QEP_TRAN_XP, QS_priv_.smObjFilter, me)
;;;282                    QS_OBJ_(me); /* this state machine object */
;;;283                    QS_FUN_(tatbl->target->stateHandler);         /* source */
;;;284                    QS_FUN_(me->temp.tatbl->target->stateHandler);/* target */
;;;285                QS_END_()
;;;286            }
;;;287            else {
;;;288                /* empty */
;;;289            }
;;;290    #endif /* Q_SPY */
;;;291        }
;;;292    
;;;293        if (r >= (QState)Q_RET_TRAN_INIT) {
000054  e3570009          CMP      r7,#9
000058  3a000003          BCC      |L1.108|
;;;294            me->state.obj = me->temp.tatbl->target; /* the tran. target */
00005c  e5940008          LDR      r0,[r4,#8]
000060  e5900000          LDR      r0,[r0,#0]
000064  e5840004          STR      r0,[r4,#4]
000068  ea000001          B        |L1.116|
                  |L1.108|
;;;295        }
;;;296        else {
;;;297            me->state.obj = tatbl->target; /* the tran. target */
00006c  e5950000          LDR      r0,[r5,#0]
000070  e5840004          STR      r0,[r4,#4]
                  |L1.116|
;;;298        }
;;;299    
;;;300        return r;
000074  e1a00007          MOV      r0,r7
000078  e8bd41f0          POP      {r4-r8,lr}
;;;301    }
00007c  e12fff1e          BX       lr
;;;302    
                          ENDP

                  QMsm_exitToTranSource_ PROC
;;;314    */
;;;315    static void QMsm_exitToTranSource_(QMsm * const me, QMState const *s,
000080  e92d41f0          PUSH     {r4-r8,lr}
;;;316                                       QMState const * const ts)
;;;317    {
000084  e1a05000          MOV      r5,r0
000088  e1a04001          MOV      r4,r1
00008c  e1a06002          MOV      r6,r2
;;;318        /* exit states from the current state to the tran. source state */
;;;319        while (s != ts) {
000090  ea000014          B        |L1.232|
                  |L1.148|
;;;320            /* exit action provided in state 's'? */
;;;321            if (s->exitAction != Q_ACTION_CAST(0)) {
000094  e594000c          LDR      r0,[r4,#0xc]
000098  e3500000          CMP      r0,#0
00009c  0a000010          BEQ      |L1.228|
;;;322                QState r = (*s->exitAction)(me); /* execute the exit action */
0000a0  e1a00005          MOV      r0,r5
0000a4  e594100c          LDR      r1,[r4,#0xc]
0000a8  e1a0e00f          MOV      lr,pc
0000ac  e12fff11          BX       r1
0000b0  e1a07000          MOV      r7,r0
;;;323    
;;;324                /*  is it a regular exit? */
;;;325                if (r == (QState)Q_RET_EXIT) {
0000b4  e3570006          CMP      r7,#6
0000b8  1a000001          BNE      |L1.196|
;;;326                    QS_CRIT_STAT_
;;;327    
;;;328                    QS_BEGIN_(QS_QEP_STATE_EXIT, QS_priv_.smObjFilter, me)
;;;329                        QS_OBJ_(me);              /* this state machine object */
;;;330                        QS_FUN_(s->stateHandler); /* the exited state handler */
;;;331                    QS_END_()
;;;332    
;;;333                    s = s->superstate; /* advance to the superstate */
0000bc  e5944000          LDR      r4,[r4,#0]
0000c0  ea000006          B        |L1.224|
                  |L1.196|
;;;334                }
;;;335                /*  is it exit from a submachine? */
;;;336                else if (r == (QState)Q_RET_SUPER_SUB) {
0000c4  e3570001          CMP      r7,#1
0000c8  1a000001          BNE      |L1.212|
;;;337                    /* advance to the current host state of the submachie */
;;;338                    s = me->temp.obj;
0000cc  e5954008          LDR      r4,[r5,#8]
0000d0  ea000002          B        |L1.224|
                  |L1.212|
;;;339                }
;;;340                else {
;;;341                    Q_ERROR_ID(310);
0000d4  e59f12a8          LDR      r1,|L1.900|
0000d8  e59f02a0          LDR      r0,|L1.896|
0000dc  ebfffffe          BL       Q_onAssert
                  |L1.224|
;;;342                }
;;;343            }
0000e0  ea000000          B        |L1.232|
                  |L1.228|
;;;344            else {
;;;345                s = s->superstate; /* advance to the superstate */
0000e4  e5944000          LDR      r4,[r4,#0]
                  |L1.232|
0000e8  e1540006          CMP      r4,r6                 ;319
0000ec  1affffe8          BNE      |L1.148|
;;;346            }
;;;347        }
;;;348    }
0000f0  e8bd41f0          POP      {r4-r8,lr}
0000f4  e12fff1e          BX       lr
;;;349    
                          ENDP

                  QMsm_enterHistory_ PROC
;;;362    */
;;;363    static QState QMsm_enterHistory_(QMsm * const me, QMState const * const hist){
0000f8  e92d47ff          PUSH     {r0-r10,lr}
0000fc  e1a07000          MOV      r7,r0
000100  e1a05001          MOV      r5,r1
;;;364        QMState const *s;
;;;365        QMState const *ts = me->state.obj; /* transition source */
000104  e5979004          LDR      r9,[r7,#4]
;;;366        QMState const *entry[QMSM_MAX_ENTRY_DEPTH_];
;;;367        QState r;
;;;368        uint_fast8_t i = (uint_fast8_t)0;  /* transition entry path index */
000108  e3a04000          MOV      r4,#0
;;;369        QS_CRIT_STAT_
;;;370    
;;;371        QS_BEGIN_(QS_QEP_TRAN_HIST, QS_priv_.smObjFilter, me)
;;;372            QS_OBJ_(me);                 /* this state machine object */
;;;373            QS_FUN_(ts->stateHandler);   /* source state handler */
;;;374            QS_FUN_(hist->stateHandler); /* target state handler */
;;;375        QS_END_()
;;;376    
;;;377        for (s = hist; s != ts; s = s->superstate) {
00010c  e1a06005          MOV      r6,r5
000110  ea000011          B        |L1.348|
                  |L1.276|
;;;378            Q_ASSERT_ID(410, s != (QMState const *)0);
000114  e3560000          CMP      r6,#0
000118  0a000000          BEQ      |L1.288|
00011c  ea000002          B        |L1.300|
                  |L1.288|
000120  e59f1260          LDR      r1,|L1.904|
000124  e59f0254          LDR      r0,|L1.896|
000128  ebfffffe          BL       Q_onAssert
                  |L1.300|
;;;379            if (s->entryAction != (QActionHandler)0) {
00012c  e5960008          LDR      r0,[r6,#8]
000130  e3500000          CMP      r0,#0
000134  0a000007          BEQ      |L1.344|
;;;380                entry[i] = s;
000138  e78d6104          STR      r6,[sp,r4,LSL #2]
;;;381                ++i;
00013c  e2844001          ADD      r4,r4,#1
;;;382                Q_ASSERT_ID(420, i <= (uint_fast8_t)Q_DIM(entry));
000140  e3540004          CMP      r4,#4
000144  8a000000          BHI      |L1.332|
000148  ea000002          B        |L1.344|
                  |L1.332|
00014c  e3a01f69          MOV      r1,#0x1a4
000150  e59f0228          LDR      r0,|L1.896|
000154  ebfffffe          BL       Q_onAssert
                  |L1.344|
000158  e5966000          LDR      r6,[r6,#0]            ;377
                  |L1.348|
00015c  e1560009          CMP      r6,r9                 ;377
000160  1affffeb          BNE      |L1.276|
;;;383            }
;;;384        }
;;;385    
;;;386        /* retrace the entry path in reverse (desired) order... */
;;;387        while (i > (uint_fast8_t)0) {
000164  ea000006          B        |L1.388|
                  |L1.360|
;;;388            --i;
000168  e2444001          SUB      r4,r4,#1
;;;389            r = (*entry[i]->entryAction)(me); /* run entry action in entry[i] */
00016c  e79d0104          LDR      r0,[sp,r4,LSL #2]
000170  e5901008          LDR      r1,[r0,#8]
000174  e1a00007          MOV      r0,r7
000178  e1a0e00f          MOV      lr,pc
00017c  e12fff11          BX       r1
000180  e1a08000          MOV      r8,r0
                  |L1.388|
000184  e3540000          CMP      r4,#0                 ;387
000188  1afffff6          BNE      |L1.360|
;;;390    
;;;391            QS_BEGIN_(QS_QEP_STATE_ENTRY, QS_priv_.smObjFilter, me)
;;;392                QS_OBJ_(me);
;;;393                QS_FUN_(entry[i]->stateHandler); /* entered state handler */
;;;394            QS_END_()
;;;395        }
;;;396    
;;;397        me->state.obj = hist; /* set current state to the transition target */
00018c  e5875004          STR      r5,[r7,#4]
;;;398    
;;;399        /* initial tran. present? */
;;;400        if (hist->initAction != (QActionHandler)0) {
000190  e5950010          LDR      r0,[r5,#0x10]
000194  e3500000          CMP      r0,#0
000198  0a000005          BEQ      |L1.436|
;;;401            r = (*hist->initAction)(me); /* execute the transition action */
00019c  e1a00007          MOV      r0,r7
0001a0  e5951010          LDR      r1,[r5,#0x10]
0001a4  e1a0e00f          MOV      lr,pc
0001a8  e12fff11          BX       r1
0001ac  e1a08000          MOV      r8,r0
0001b0  ea000000          B        |L1.440|
                  |L1.436|
;;;402        }
;;;403        else {
;;;404            r = (QState)Q_RET_NULL;
0001b4  e3a08007          MOV      r8,#7
                  |L1.440|
;;;405        }
;;;406        return r;
0001b8  e1a00008          MOV      r0,r8
0001bc  e28dd010          ADD      sp,sp,#0x10
0001c0  e8bd47f0          POP      {r4-r10,lr}
;;;407    }
0001c4  e12fff1e          BX       lr
;;;408    
                          ENDP

                  QMsm_dispatch_ PROC
;;;73     */
;;;74     void QMsm_dispatch_(QMsm * const me, QEvt const * const e) {
0001c8  e92d47f0          PUSH     {r4-r10,lr}
0001cc  e1a05000          MOV      r5,r0
0001d0  e1a08001          MOV      r8,r1
;;;75         QMState const *s = me->state.obj; /* store the current state */
0001d4  e5956004          LDR      r6,[r5,#4]
;;;76         QMState const *t = s;
0001d8  e1a07006          MOV      r7,r6
;;;77         QState r = (QState)Q_RET_SUPER;
0001dc  e3a04000          MOV      r4,#0
;;;78         QS_CRIT_STAT_
;;;79     
;;;80         /** \pre current state must be initialized */
;;;81         Q_REQUIRE_ID(100, s != (QMState const *)0);
0001e0  e3560000          CMP      r6,#0
0001e4  0a000000          BEQ      |L1.492|
0001e8  ea000002          B        |L1.504|
                  |L1.492|
0001ec  e3a01064          MOV      r1,#0x64
0001f0  e59f0188          LDR      r0,|L1.896|
0001f4  ebfffffe          BL       Q_onAssert
                  |L1.504|
;;;82     
;;;83         QS_BEGIN_(QS_QEP_DISPATCH, QS_priv_.smObjFilter, me)
;;;84             QS_TIME_();               /* time stamp */
;;;85             QS_SIG_(e->sig);          /* the signal of the event */
;;;86             QS_OBJ_(me);              /* this state machine object */
;;;87             QS_FUN_(s->stateHandler); /* the current state handler */
;;;88         QS_END_()
;;;89     
;;;90         /* scan the state hierarchy up to the top state... */
;;;91         do {
0001f8  e1a00000          MOV      r0,r0
                  |L1.508|
;;;92             r = (*t->stateHandler)(me, e);  /* call state handler function */
0001fc  e1a01008          MOV      r1,r8
000200  e1a00005          MOV      r0,r5
000204  e5972004          LDR      r2,[r7,#4]
000208  e1a0e00f          MOV      lr,pc
00020c  e12fff12          BX       r2
000210  e1a04000          MOV      r4,r0
;;;93     
;;;94             /* event handled? (the most frequent case) */
;;;95             if (r >= (QState)Q_RET_HANDLED) {
000214  e3540003          CMP      r4,#3
000218  3a000000          BCC      |L1.544|
;;;96                 break; /* done scanning the state hierarchy */
00021c  ea000010          B        |L1.612|
                  |L1.544|
;;;97             }
;;;98             /* event unhandled and passed to the superstate? */
;;;99             else if (r == (QState)Q_RET_SUPER) {
000220  e3540000          CMP      r4,#0
000224  1a000001          BNE      |L1.560|
;;;100                t = t->superstate; /* advance to the superstate */
000228  e5977000          LDR      r7,[r7,#0]
00022c  ea00000a          B        |L1.604|
                  |L1.560|
;;;101            }
;;;102            /* event unhandled and passed to a submachine superstate? */
;;;103            else if (r == (QState)Q_RET_SUPER_SUB) {
000230  e3540001          CMP      r4,#1
000234  1a000001          BNE      |L1.576|
;;;104                t = me->temp.obj; /* current host state of the submachie */
000238  e5957008          LDR      r7,[r5,#8]
00023c  ea000006          B        |L1.604|
                  |L1.576|
;;;105            }
;;;106            /* event unhandled due to a guard? */
;;;107            else if (r == (QState)Q_RET_UNHANDLED) {
000240  e3540002          CMP      r4,#2
000244  1a000001          BNE      |L1.592|
;;;108    
;;;109                QS_BEGIN_(QS_QEP_UNHANDLED, QS_priv_.smObjFilter, me)
;;;110                    QS_SIG_(e->sig);  /* the signal of the event */
;;;111                    QS_OBJ_(me);      /* this state machine object */
;;;112                    QS_FUN_(t->stateHandler); /* the current state */
;;;113                QS_END_()
;;;114    
;;;115                t = t->superstate; /* advance to the superstate */
000248  e5977000          LDR      r7,[r7,#0]
00024c  ea000002          B        |L1.604|
                  |L1.592|
;;;116            }
;;;117            else {
;;;118                /* no other return value should be produced */
;;;119                Q_ERROR_ID(110);
000250  e3a0106e          MOV      r1,#0x6e
000254  e59f0124          LDR      r0,|L1.896|
000258  ebfffffe          BL       Q_onAssert
                  |L1.604|
;;;120            }
;;;121        } while (t != (QMState const *)0);
00025c  e3570000          CMP      r7,#0
000260  1affffe5          BNE      |L1.508|
                  |L1.612|
000264  e1a00000          MOV      r0,r0                 ;96
;;;122    
;;;123    
;;;124        /* any kind of transition taken? */
;;;125        if (r >= (QState)Q_RET_TRAN) {
000268  e3540008          CMP      r4,#8
00026c  3a000041          BCC      |L1.888|
;;;126    #ifdef Q_SPY
;;;127            QMState const *ts = t; /* transition source for QS tracing */
;;;128    
;;;129            /* the transition source state must not be NULL */
;;;130            Q_ASSERT_ID(120, ts != (QMState const *)0);
;;;131    #endif /* Q_SPY*/
;;;132    
;;;133            do {
000270  e1a00000          MOV      r0,r0
                  |L1.628|
;;;134                /* save the transition-action table before it gets clobbered */
;;;135                QMTranActTable const *tatbl = me->temp.tatbl;
000274  e5959008          LDR      r9,[r5,#8]
;;;136    
;;;137                /* was a regular state transition segment taken? */
;;;138                if (r == (QState)Q_RET_TRAN) {
000278  e3540008          CMP      r4,#8
00027c  1a000008          BNE      |L1.676|
;;;139                    QMsm_exitToTranSource_(me, s, t);
000280  e1a02007          MOV      r2,r7
000284  e1a01006          MOV      r1,r6
000288  e1a00005          MOV      r0,r5
00028c  ebfffffe          BL       QMsm_exitToTranSource_
;;;140                    r = QMsm_execTatbl_(me, tatbl);
000290  e1a01009          MOV      r1,r9
000294  e1a00005          MOV      r0,r5
000298  ebfffffe          BL       QMsm_execTatbl_
00029c  e1a04000          MOV      r4,r0
0002a0  ea000030          B        |L1.872|
                  |L1.676|
;;;141                }
;;;142                /* was an initial transition segment taken? */
;;;143                else if (r == (QState)Q_RET_TRAN_INIT) {
0002a4  e3540009          CMP      r4,#9
0002a8  1a000004          BNE      |L1.704|
;;;144                    r = QMsm_execTatbl_(me, tatbl);
0002ac  e1a01009          MOV      r1,r9
0002b0  e1a00005          MOV      r0,r5
0002b4  ebfffffe          BL       QMsm_execTatbl_
0002b8  e1a04000          MOV      r4,r0
0002bc  ea000029          B        |L1.872|
                  |L1.704|
;;;145                }
;;;146                /* was a transition segment to history taken? */
;;;147                else if (r == (QState)Q_RET_TRAN_HIST) {
0002c0  e354000a          CMP      r4,#0xa
0002c4  1a00000d          BNE      |L1.768|
;;;148                    QMState const *hist = me->state.obj; /* save history */
0002c8  e595a004          LDR      r10,[r5,#4]
;;;149                    me->state.obj = s; /* restore the original state */
0002cc  e5856004          STR      r6,[r5,#4]
;;;150                    QMsm_exitToTranSource_(me, s, t);
0002d0  e1a02007          MOV      r2,r7
0002d4  e1a01006          MOV      r1,r6
0002d8  e1a00005          MOV      r0,r5
0002dc  ebfffffe          BL       QMsm_exitToTranSource_
;;;151                    (void)QMsm_execTatbl_(me, tatbl);
0002e0  e1a01009          MOV      r1,r9
0002e4  e1a00005          MOV      r0,r5
0002e8  ebfffffe          BL       QMsm_execTatbl_
;;;152                    r = QMsm_enterHistory_(me, hist);
0002ec  e1a0100a          MOV      r1,r10
0002f0  e1a00005          MOV      r0,r5
0002f4  ebfffffe          BL       QMsm_enterHistory_
0002f8  e1a04000          MOV      r4,r0
;;;153                }
0002fc  ea000019          B        |L1.872|
                  |L1.768|
;;;154                /* was a transition segment to an entry point taken? */
;;;155                else if (r == (QState)Q_RET_TRAN_EP) {
000300  e354000b          CMP      r4,#0xb
000304  1a000004          BNE      |L1.796|
;;;156                    r = QMsm_execTatbl_(me, tatbl);
000308  e1a01009          MOV      r1,r9
00030c  e1a00005          MOV      r0,r5
000310  ebfffffe          BL       QMsm_execTatbl_
000314  e1a04000          MOV      r4,r0
000318  ea000012          B        |L1.872|
                  |L1.796|
;;;157                }
;;;158                /* was a transition segment to an exit point taken? */
;;;159                else if (r == (QState)Q_RET_TRAN_XP) {
00031c  e354000c          CMP      r4,#0xc
000320  1a00000d          BNE      |L1.860|
;;;160                    QActionHandler const act = me->state.act; /* save XP action */
000324  e595a004          LDR      r10,[r5,#4]
;;;161                    me->state.obj = s; /* restore the original state */
000328  e5856004          STR      r6,[r5,#4]
;;;162    
;;;163                    QS_BEGIN_(QS_QEP_TRAN_XP, QS_priv_.smObjFilter, me)
;;;164                        QS_OBJ_(me); /* this state machine object */
;;;165                        QS_FUN_(me->state.obj->stateHandler);/* source handler */
;;;166                        QS_FUN_(tatbl->target->stateHandler);/* target handler */
;;;167                    QS_END_()
;;;168    
;;;169                    QMsm_exitToTranSource_(me, s, t);
00032c  e1a02007          MOV      r2,r7
000330  e1a01006          MOV      r1,r6
000334  e1a00005          MOV      r0,r5
000338  ebfffffe          BL       QMsm_exitToTranSource_
;;;170                    (void)QMsm_execTatbl_(me, tatbl);
00033c  e1a01009          MOV      r1,r9
000340  e1a00005          MOV      r0,r5
000344  ebfffffe          BL       QMsm_execTatbl_
;;;171                    r = (*act)(me); /* execute the XP action */
000348  e1a00005          MOV      r0,r5
00034c  e1a0e00f          MOV      lr,pc
000350  e12fff1a          BX       r10
000354  e1a04000          MOV      r4,r0
;;;172                }
000358  ea000002          B        |L1.872|
                  |L1.860|
;;;173                else {
;;;174                    /* no other return value should be produced */
;;;175                    Q_ERROR_ID(130);
00035c  e3a01082          MOV      r1,#0x82
000360  e59f0018          LDR      r0,|L1.896|
000364  ebfffffe          BL       Q_onAssert
                  |L1.872|
;;;176                }
;;;177                s = me->state.obj;
000368  e5956004          LDR      r6,[r5,#4]
;;;178                t = s;
00036c  e1a07006          MOV      r7,r6
;;;179    
;;;180            } while (r >= (QState)Q_RET_TRAN);
000370  e3540008          CMP      r4,#8
000374  2affffbe          BCS      |L1.628|
                  |L1.888|
;;;181    
;;;182            QS_BEGIN_(QS_QEP_TRAN, QS_priv_.smObjFilter, me)
;;;183                QS_TIME_();                /* time stamp */
;;;184                QS_SIG_(e->sig);           /* the signal of the event */
;;;185                QS_OBJ_(me);               /* this state machine object */
;;;186                QS_FUN_(ts->stateHandler); /* the transition source */
;;;187                QS_FUN_(s->stateHandler);  /* the new active state */
;;;188            QS_END_()
;;;189        }
;;;190    
;;;191    #ifdef Q_SPY
;;;192        /* was the event handled? */
;;;193        else if (r == (QState)Q_RET_HANDLED) {
;;;194            /* internal tran. source can't be NULL */
;;;195            Q_ASSERT_ID(140, t != (QMState const *)0);
;;;196    
;;;197            QS_BEGIN_(QS_QEP_INTERN_TRAN, QS_priv_.smObjFilter, me)
;;;198                QS_TIME_();                /* time stamp */
;;;199                QS_SIG_(e->sig);           /* the signal of the event */
;;;200                QS_OBJ_(me);               /* this state machine object */
;;;201                QS_FUN_(t->stateHandler);  /* the source state */
;;;202            QS_END_()
;;;203    
;;;204        }
;;;205        /* event bubbled to the 'top' state? */
;;;206        else if (t == (QMState const *)0) {
;;;207    
;;;208            QS_BEGIN_(QS_QEP_IGNORED, QS_priv_.smObjFilter, me)
;;;209                QS_TIME_();                /* time stamp */
;;;210                QS_SIG_(e->sig);           /* the signal of the event */
;;;211                QS_OBJ_(me);               /* this state machine object */
;;;212                QS_FUN_(s->stateHandler);  /* the current state */
;;;213            QS_END_()
;;;214    
;;;215        }
;;;216    #endif /* Q_SPY */
;;;217    
;;;218        else {
;;;219            /* empty */
;;;220        }
;;;221    }
000378  e8bd47f0          POP      {r4-r10,lr}
00037c  e12fff1e          BX       lr
;;;222    
                          ENDP

                  |L1.896|
                          DCD      Q_this_module_
                  |L1.900|
                          DCD      0x00000136
                  |L1.904|
                          DCD      0x0000019a

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  716d736d          DCB      0x71,0x6d,0x73,0x6d
000004  5f646973          DCB      0x5f,0x64,0x69,0x73
000008  00                DCB      0x00
