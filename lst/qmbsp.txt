; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qmbsp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qmbsp.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qmbsp.crf src\qmbsp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  BSP_Init PROC
;;;15     
;;;16     void BSP_Init( ) {
000000  e92d4010          PUSH     {r4,lr}
;;;17     	Timer0_Init();
000004  ebfffffe          BL       Timer0_Init
;;;18     	Timer1_Init();
000008  ebfffffe          BL       Timer1_Init
;;;19     	AD_Wheel_Init();
00000c  ebfffffe          BL       AD_Wheel_Init
;;;20     	Button_Init();
000010  ebfffffe          BL       Button_Init
;;;21     	LED_Init();
000014  ebfffffe          BL       LED_Init
;;;22     	//COM
;;;23       uart_init_0 ( );
000018  ebfffffe          BL       uart_init_0
;;;24       lcd_init();
00001c  ebfffffe          BL       lcd_init
;;;25       lcd_clear();
000020  ebfffffe          BL       lcd_clear
;;;26       set_cursor (0, 0);
000024  e3a01000          MOV      r1,#0
000028  e1a00001          MOV      r0,r1
00002c  ebfffffe          BL       set_cursor
;;;27     }
000030  e8bd4010          POP      {r4,lr}
000034  e12fff1e          BX       lr
;;;28     
                          ENDP

                  BSP_display PROC
;;;30     /*..........................................................................*/
;;;31     void BSP_display(uint8_t timeout) {
000038  e92d4010          PUSH     {r4,lr}
00003c  e1a04000          MOV      r4,r0
;;;32         printf("[%3d] ", (int)timeout);
000040  e1a01004          MOV      r1,r4
000044  e28f00e8          ADR      r0,|L1.308|
000048  ebfffffe          BL       __2printf
;;;33         fflush(stdout);
00004c  e59f00e8          LDR      r0,|L1.316|
000050  ebfffffe          BL       fflush
;;;34     }
000054  e8bd4010          POP      {r4,lr}
000058  e12fff1e          BX       lr
;;;35     
                          ENDP

                  BSP_display_str PROC
;;;37     /*..........................................................................*/
;;;38     void BSP_display_str(char *msg) {
00005c  e92d4010          PUSH     {r4,lr}
000060  e1a04000          MOV      r4,r0
;;;39          printf("%s", msg);
000064  e1a01004          MOV      r1,r4
000068  e28f00d0          ADR      r0,|L1.320|
00006c  ebfffffe          BL       __2printf
;;;40     
;;;41       
;;;42     }
000070  e8bd4010          POP      {r4,lr}
000074  e12fff1e          BX       lr
;;;43     /*..........................................................................*/
                          ENDP

                  BSP_exit PROC
;;;44     void BSP_exit(void) {
000078  e92d4010          PUSH     {r4,lr}
;;;45         printf("Bye, Bye!");
00007c  e28f00c0          ADR      r0,|L1.324|
000080  ebfffffe          BL       __2printf
;;;46         _sys_exit(0);
000084  e3a00000          MOV      r0,#0
000088  ebfffffe          BL       _sys_exit
;;;47     }
00008c  e8bd4010          POP      {r4,lr}
000090  e12fff1e          BX       lr
;;;48     
                          ENDP

                  BSP_delay PROC
;;;49     void BSP_delay ( int val ){
000094  e3a01000          MOV      r1,#0
;;;50     
;;;51     int i;
;;;52     	for(i=0;i<val; i++);
000098  ea000000          B        |L1.160|
                  |L1.156|
00009c  e2811001          ADD      r1,r1,#1
                  |L1.160|
0000a0  e1510000          CMP      r1,r0
0000a4  bafffffc          BLT      |L1.156|
;;;53     
;;;54     }
0000a8  e12fff1e          BX       lr
;;;55     #define BOMB
                          ENDP

                  BSP_boom PROC
;;;57     #ifdef BOMB
;;;58     void BSP_boom(void) {
0000ac  e92d4010          PUSH     {r4,lr}
;;;59     
;;;60     	printf("boom!!!!\n");
0000b0  e28f0098          ADR      r0,|L1.336|
0000b4  ebfffffe          BL       __2printf
;;;61     	_sys_exit(0);
0000b8  e3a00000          MOV      r0,#0
0000bc  ebfffffe          BL       _sys_exit
;;;62     }
0000c0  e8bd4010          POP      {r4,lr}
0000c4  e12fff1e          BX       lr
;;;63     #endif
                          ENDP

                  BSP_LCD_display_str PROC
;;;64     
;;;65     void  BSP_LCD_display_str( char * str, int line, int pos){
0000c8  e92d4070          PUSH     {r4-r6,lr}
0000cc  e1a06000          MOV      r6,r0
0000d0  e1a04001          MOV      r4,r1
0000d4  e1a05002          MOV      r5,r2
;;;66     
;;;67       set_cursor (line,pos);
0000d8  e20510ff          AND      r1,r5,#0xff
0000dc  e20400ff          AND      r0,r4,#0xff
0000e0  ebfffffe          BL       set_cursor
;;;68       lcd_print ( (unsigned char const*) str);
0000e4  e1a00006          MOV      r0,r6
0000e8  ebfffffe          BL       lcd_print
;;;69     
;;;70     
;;;71     };
0000ec  e8bd4070          POP      {r4-r6,lr}
0000f0  e12fff1e          BX       lr
;;;72     
                          ENDP

                  Q_onAssert PROC
;;;99     /* this function is used by the QP embedded systems-friendly assertions */
;;;100    void Q_onAssert(char const * const file, int line) {
0000f4  e92d4070          PUSH     {r4-r6,lr}
0000f8  e1a04000          MOV      r4,r0
0000fc  e1a05001          MOV      r5,r1
;;;101        printf("Assertion failed in %s, line %d", file, line);
000100  e1a02005          MOV      r2,r5
000104  e1a01004          MOV      r1,r4
000108  e28f004c          ADR      r0,|L1.348|
00010c  ebfffffe          BL       __2printf
;;;102        fflush(stdout);
000110  e59f0024          LDR      r0,|L1.316|
000114  ebfffffe          BL       fflush
;;;103        _sys_exit(-1);
000118  e3e00000          MVN      r0,#0
00011c  ebfffffe          BL       _sys_exit
;;;104    }
000120  e8bd4070          POP      {r4-r6,lr}
000124  e12fff1e          BX       lr
;;;105    /*..........................................................................*/
                          ENDP

                  QF_onCleanup PROC
;;;106    /* Application specific callbacks from the framework  */
;;;107    void QF_onCleanup(void)	  {
000128  e12fff1e          BX       lr
;;;108    
;;;109    	 ;
;;;110    
;;;111    	 }
;;;112    
                          ENDP

                  QF_onIdle PROC
;;;113    void QF_onIdle(void)	  {
00012c  e12fff1e          BX       lr
;;;114    
;;;115    	
;;;116    	 ;
;;;117    
;;;118    	 }
;;;119    void QF_onStartup(void)	  {
                          ENDP

                  QF_onStartup PROC
000130  e12fff1e          BX       lr
;;;120    
;;;121    	
;;;122    	 ;
;;;123    
;;;124    	 }
                          ENDP

                  |L1.308|
000134  5b253364          DCB      "[%3d] ",0
000138  5d2000  
00013b  00                DCB      0
                  |L1.316|
                          DCD      __stdout
                  |L1.320|
000140  257300            DCB      "%s",0
000143  00                DCB      0
                  |L1.324|
000144  4279652c          DCB      "Bye, Bye!",0
000148  20427965
00014c  2100    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L1.336|
000150  626f6f6d          DCB      "boom!!!!\n",0
000154  21212121
000158  0a00    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L1.348|
00015c  41737365          DCB      "Assertion failed in %s, line %d",0
000160  7274696f
000164  6e206661
000168  696c6564
00016c  20696e20
000170  25732c20
000174  6c696e65
000178  20256400
