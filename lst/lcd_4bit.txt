; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_4bit.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd_4bit.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\lcd_4bit.crf bsp\LCD_4bit.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;101    
;;;102    static void delay (int cnt)
000000  e1a00000          MOV      r0,r0
;;;103    {
;;;104      cnt <<= DELAY_2N;
;;;105    
;;;106      while (cnt--);
000004  e1a00000          MOV      r0,r0
                  |L1.8|
000008  e1b01000          MOVS     r1,r0
00000c  e2400001          SUB      r0,r0,#1
000010  1afffffc          BNE      |L1.8|
;;;107    }
000014  e12fff1e          BX       lr
;;;108    
                          ENDP

                  lcd_read_status PROC
;;;115    
;;;116    static unsigned char lcd_read_status (void)
000018  e92d4010          PUSH     {r4,lr}
;;;117    {
;;;118      unsigned char status;
;;;119    
;;;120      LCD_DATA_DIR_IN
00001c  e59f02c8          LDR      r0,|L1.748|
000020  e5900018          LDR      r0,[r0,#0x18]
000024  e3c0040f          BIC      r0,r0,#0xf000000
000028  e59f12bc          LDR      r1,|L1.748|
00002c  e5810018          STR      r0,[r1,#0x18]
;;;121      LCD_RS(0)
000030  e3a00201          MOV      r0,#0x10000000
000034  e581001c          STR      r0,[r1,#0x1c]
;;;122      LCD_RW(1)
000038  e3a00202          MOV      r0,#0x20000000
00003c  e5810014          STR      r0,[r1,#0x14]
;;;123      delay(10);
000040  e3a0000a          MOV      r0,#0xa
000044  ebfffffe          BL       delay
;;;124      LCD_E(1)
000048  e3a00103          MOV      r0,#0xc0000000
00004c  e59f1298          LDR      r1,|L1.748|
000050  e5810014          STR      r0,[r1,#0x14]
;;;125      delay(10);
000054  e3a0000a          MOV      r0,#0xa
000058  ebfffffe          BL       delay
;;;126      status  = LCD_DATA_IN << 4;
00005c  e59f0288          LDR      r0,|L1.748|
000060  e5900010          LDR      r0,[r0,#0x10]
000064  e3a0100f          MOV      r1,#0xf
000068  e0010c20          AND      r0,r1,r0,LSR #24
00006c  e1a04200          LSL      r4,r0,#4
;;;127      LCD_E(0)
000070  e3a00103          MOV      r0,#0xc0000000
000074  e59f1270          LDR      r1,|L1.748|
000078  e581001c          STR      r0,[r1,#0x1c]
;;;128      delay(10);
00007c  e3a0000a          MOV      r0,#0xa
000080  ebfffffe          BL       delay
;;;129      LCD_E(1)
000084  e3a00103          MOV      r0,#0xc0000000
000088  e59f125c          LDR      r1,|L1.748|
00008c  e5810014          STR      r0,[r1,#0x14]
;;;130      delay(10);
000090  e3a0000a          MOV      r0,#0xa
000094  ebfffffe          BL       delay
;;;131      status |= LCD_DATA_IN;
000098  e59f024c          LDR      r0,|L1.748|
00009c  e5900010          LDR      r0,[r0,#0x10]
0000a0  e3a0100f          MOV      r1,#0xf
0000a4  e0010c20          AND      r0,r1,r0,LSR #24
0000a8  e1844000          ORR      r4,r4,r0
;;;132      LCD_E(0)
0000ac  e3a00103          MOV      r0,#0xc0000000
0000b0  e59f1234          LDR      r1,|L1.748|
0000b4  e581001c          STR      r0,[r1,#0x1c]
;;;133      LCD_DATA_DIR_OUT
0000b8  e1810000          ORR      r0,r1,r0
0000bc  e5900018          LDR      r0,[r0,#0x18]
0000c0  e380040f          ORR      r0,r0,#0xf000000
0000c4  e5810018          STR      r0,[r1,#0x18]
;;;134      return (status);
0000c8  e1a00004          MOV      r0,r4
0000cc  e8bd4010          POP      {r4,lr}
;;;135    }
0000d0  e12fff1e          BX       lr
;;;136    
                          ENDP

                  wait_while_busy PROC
;;;143    
;;;144    static unsigned char wait_while_busy (void)
0000d4  e92d4010          PUSH     {r4,lr}
;;;145    {
;;;146      unsigned char status;
;;;147    
;;;148      do  {
0000d8  e1a00000          MOV      r0,r0
                  |L1.220|
;;;149        status = lcd_read_status();
0000dc  ebfffffe          BL       lcd_read_status
;;;150      }  while (status & 0x80);             /* Wait for busy flag                 */
0000e0  e2001080          AND      r1,r0,#0x80
0000e4  e3510000          CMP      r1,#0
0000e8  1afffffb          BNE      |L1.220|
0000ec  e8bd4010          POP      {r4,lr}
;;;151    
;;;152      return (status);
;;;153    }
0000f0  e12fff1e          BX       lr
;;;154    
                          ENDP

                  lcd_write_4bit PROC
;;;161    
;;;162    void lcd_write_4bit (unsigned char c)
0000f4  e92d4010          PUSH     {r4,lr}
;;;163    {
0000f8  e1a04000          MOV      r4,r0
;;;164      LCD_RW(0)
0000fc  e3a00202          MOV      r0,#0x20000000
000100  e59f11e4          LDR      r1,|L1.748|
000104  e581001c          STR      r0,[r1,#0x1c]
;;;165      LCD_E(1)
000108  e3a00103          MOV      r0,#0xc0000000
00010c  e5810014          STR      r0,[r1,#0x14]
;;;166      LCD_DATA_OUT(c&0x0F)
000110  e3a0040f          MOV      r0,#0xf000000
000114  e581001c          STR      r0,[r1,#0x1c]
000118  e1a00e04          LSL      r0,r4,#28
00011c  e1a00220          LSR      r0,r0,#4
000120  e5810014          STR      r0,[r1,#0x14]
;;;167      delay(10);
000124  e3a0000a          MOV      r0,#0xa
000128  ebfffffe          BL       delay
;;;168      LCD_E(0)
00012c  e3a00103          MOV      r0,#0xc0000000
000130  e59f11b4          LDR      r1,|L1.748|
000134  e581001c          STR      r0,[r1,#0x1c]
;;;169      delay(10);
000138  e3a0000a          MOV      r0,#0xa
00013c  ebfffffe          BL       delay
;;;170    }
000140  e8bd4010          POP      {r4,lr}
000144  e12fff1e          BX       lr
;;;171    
                          ENDP

                  lcd_write_cmd PROC
;;;178    
;;;179    void lcd_write_cmd (unsigned char c)
000148  e92d4010          PUSH     {r4,lr}
;;;180    {
00014c  e1a04000          MOV      r4,r0
;;;181      wait_while_busy();
000150  ebfffffe          BL       wait_while_busy
;;;182    
;;;183      LCD_RS(0)
000154  e3a00201          MOV      r0,#0x10000000
000158  e59f118c          LDR      r1,|L1.748|
00015c  e581001c          STR      r0,[r1,#0x1c]
;;;184      lcd_write_4bit (c>>4);
000160  e1a00244          ASR      r0,r4,#4
000164  ebfffffe          BL       lcd_write_4bit
;;;185      lcd_write_4bit (c);
000168  e1a00004          MOV      r0,r4
00016c  ebfffffe          BL       lcd_write_4bit
;;;186    }
000170  e8bd4010          POP      {r4,lr}
000174  e12fff1e          BX       lr
;;;187    
                          ENDP

                  lcd_write_data PROC
;;;194    
;;;195    static void lcd_write_data (unsigned char c)
000178  e92d4010          PUSH     {r4,lr}
;;;196    {
00017c  e1a04000          MOV      r4,r0
;;;197      wait_while_busy();
000180  ebfffffe          BL       wait_while_busy
;;;198    
;;;199      LCD_RS(1)
000184  e3a00201          MOV      r0,#0x10000000
000188  e59f115c          LDR      r1,|L1.748|
00018c  e5810014          STR      r0,[r1,#0x14]
;;;200      lcd_write_4bit (c>>4);
000190  e1a00244          ASR      r0,r4,#4
000194  ebfffffe          BL       lcd_write_4bit
;;;201      lcd_write_4bit (c);
000198  e1a00004          MOV      r0,r4
00019c  ebfffffe          BL       lcd_write_4bit
;;;202    }
0001a0  e8bd4010          POP      {r4,lr}
0001a4  e12fff1e          BX       lr
;;;203    
                          ENDP

                  lcd_putchar PROC
;;;210    
;;;211    void lcd_putchar (char c)
0001a8  e92d4010          PUSH     {r4,lr}
;;;212    { 
0001ac  e1a04000          MOV      r4,r0
;;;213      lcd_write_data (c);
0001b0  e1a00004          MOV      r0,r4
0001b4  ebfffffe          BL       lcd_write_data
;;;214    }
0001b8  e8bd4010          POP      {r4,lr}
0001bc  e12fff1e          BX       lr
;;;215    
                          ENDP

                  lcd_init PROC
;;;222    
;;;223    void lcd_init (void)
0001c0  e92d4070          PUSH     {r4-r6,lr}
;;;224    { 
;;;225      int i;
;;;226      unsigned char const *p;
;;;227    
;;;228      /* Set all pins for LCD as outputs                                          */
;;;229      LCD_ALL_DIR_OUT
0001c4  e59f0120          LDR      r0,|L1.748|
0001c8  e5900018          LDR      r0,[r0,#0x18]
0001cc  e38004ff          ORR      r0,r0,#0xff000000
0001d0  e59f1114          LDR      r1,|L1.748|
0001d4  e5810018          STR      r0,[r1,#0x18]
;;;230    
;;;231      delay (15000);
0001d8  e59f0110          LDR      r0,|L1.752|
0001dc  ebfffffe          BL       delay
;;;232      LCD_RS(0)
0001e0  e3a00201          MOV      r0,#0x10000000
0001e4  e59f1100          LDR      r1,|L1.748|
0001e8  e581001c          STR      r0,[r1,#0x1c]
;;;233      lcd_write_4bit (0x3);                 /* Select 4-bit interface             */
0001ec  e3a00003          MOV      r0,#3
0001f0  ebfffffe          BL       lcd_write_4bit
;;;234      delay (4100);
0001f4  e59f00f8          LDR      r0,|L1.756|
0001f8  ebfffffe          BL       delay
;;;235      lcd_write_4bit (0x3);
0001fc  e3a00003          MOV      r0,#3
000200  ebfffffe          BL       lcd_write_4bit
;;;236      delay (100);
000204  e3a00064          MOV      r0,#0x64
000208  ebfffffe          BL       delay
;;;237      lcd_write_4bit (0x3);
00020c  e3a00003          MOV      r0,#3
000210  ebfffffe          BL       lcd_write_4bit
;;;238      lcd_write_4bit (0x2);
000214  e3a00002          MOV      r0,#2
000218  ebfffffe          BL       lcd_write_4bit
;;;239    
;;;240      lcd_write_cmd (0x28);                 /* 2 lines, 5x8 character matrix      */
00021c  e3a00028          MOV      r0,#0x28
000220  ebfffffe          BL       lcd_write_cmd
;;;241      lcd_write_cmd (0x0C);                 /* Display ctrl:Disp=ON,Curs/Blnk=OFF */
000224  e3a0000c          MOV      r0,#0xc
000228  ebfffffe          BL       lcd_write_cmd
;;;242      lcd_write_cmd (0x06);                 /* Entry mode: Move right, no shift   */
00022c  e3a00006          MOV      r0,#6
000230  ebfffffe          BL       lcd_write_cmd
;;;243    
;;;244      /* Load user-specific characters into CGRAM                                 */
;;;245      lcd_write_cmd(0x40);                  /* Set CGRAM address counter to 0     */
000234  e3a00040          MOV      r0,#0x40
000238  ebfffffe          BL       lcd_write_cmd
;;;246      p = &UserFont[0][0];
00023c  e59f50b4          LDR      r5,|L1.760|
;;;247      for (i = 0; i < sizeof(UserFont); i++, p++)
000240  e3a04000          MOV      r4,#0
000244  ea000003          B        |L1.600|
                  |L1.584|
;;;248        lcd_putchar (*p);
000248  e5d50000          LDRB     r0,[r5,#0]
00024c  ebfffffe          BL       lcd_putchar
000250  e2844001          ADD      r4,r4,#1              ;247
000254  e2855001          ADD      r5,r5,#1              ;247
                  |L1.600|
000258  e3540040          CMP      r4,#0x40              ;247
00025c  3afffff9          BCC      |L1.584|
;;;249    
;;;250      lcd_write_cmd(0x80);                  /* Set DDRAM address counter to 0     */
000260  e3a00080          MOV      r0,#0x80
000264  ebfffffe          BL       lcd_write_cmd
;;;251    }
000268  e8bd4070          POP      {r4-r6,lr}
00026c  e12fff1e          BX       lr
;;;252    
                          ENDP

                  set_cursor PROC
;;;261    
;;;262    void set_cursor (unsigned char column, unsigned char line)
000270  e92d4070          PUSH     {r4-r6,lr}
;;;263    {
000274  e1a04000          MOV      r4,r0
000278  e1a06001          MOV      r6,r1
;;;264      unsigned char address;
;;;265    
;;;266      address = (line * 40) + column;
00027c  e0860106          ADD      r0,r6,r6,LSL #2
000280  e0840180          ADD      r0,r4,r0,LSL #3
000284  e20050ff          AND      r5,r0,#0xff
;;;267      address = 0x80 + (address & 0x7F);
000288  e205007f          AND      r0,r5,#0x7f
00028c  e2800080          ADD      r0,r0,#0x80
000290  e20050ff          AND      r5,r0,#0xff
;;;268      lcd_write_cmd(address);               /* Set DDRAM address counter to 0     */
000294  e1a00005          MOV      r0,r5
000298  ebfffffe          BL       lcd_write_cmd
;;;269    }
00029c  e8bd4070          POP      {r4-r6,lr}
0002a0  e12fff1e          BX       lr
;;;270    
                          ENDP

                  lcd_clear PROC
;;;276    
;;;277    void lcd_clear (void)
0002a4  e92d4010          PUSH     {r4,lr}
;;;278    {
;;;279      lcd_write_cmd(0x01);                  /* Display clear                      */
0002a8  e3a00001          MOV      r0,#1
0002ac  ebfffffe          BL       lcd_write_cmd
;;;280      set_cursor (0, 0);
0002b0  e3a01000          MOV      r1,#0
0002b4  e1a00001          MOV      r0,r1
0002b8  ebfffffe          BL       set_cursor
;;;281    }
0002bc  e8bd4010          POP      {r4,lr}
0002c0  e12fff1e          BX       lr
;;;282    
                          ENDP

                  lcd_print PROC
;;;289    
;;;290    void lcd_print (unsigned char const *string)
0002c4  e92d4010          PUSH     {r4,lr}
;;;291    {
0002c8  e1a04000          MOV      r4,r0
;;;292      while (*string)  {
0002cc  ea000001          B        |L1.728|
                  |L1.720|
;;;293        lcd_putchar (*string++);
0002d0  e4d40001          LDRB     r0,[r4],#1
0002d4  ebfffffe          BL       lcd_putchar
                  |L1.728|
0002d8  e5d40000          LDRB     r0,[r4,#0]            ;292
0002dc  e3500000          CMP      r0,#0                 ;292
0002e0  1afffffa          BNE      |L1.720|
;;;294      }
;;;295    }
0002e4  e8bd4010          POP      {r4,lr}
0002e8  e12fff1e          BX       lr
;;;296    
                          ENDP

                  |L1.748|
                          DCD      0xe0028000
                  |L1.752|
                          DCD      0x00003a98
                  |L1.756|
                          DCD      0x00001004
                  |L1.760|
                          DCD      UserFont

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  UserFont
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  10101010          DCB      0x10,0x10,0x10,0x10
00000c  10101010          DCB      0x10,0x10,0x10,0x10
000010  18181818          DCB      0x18,0x18,0x18,0x18
000014  18181818          DCB      0x18,0x18,0x18,0x18
000018  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
00001c  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
000020  1e1e1e1e          DCB      0x1e,0x1e,0x1e,0x1e
000024  1e1e1e1e          DCB      0x1e,0x1e,0x1e,0x1e
000028  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
00002c  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00
