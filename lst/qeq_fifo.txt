; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qeq_fifo.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qeq_fifo.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qeq_fifo.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qf\source\qeq_fifo.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QEQueue_post PROC
;;;80     */
;;;81     bool QEQueue_post(QEQueue * const me, QEvt const * const e,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;82                       uint_fast16_t const margin)
;;;83     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a07002          MOV      r7,r2
;;;84         QEQueueCtr nFree; /* temporary to avoid UB for volatile access */
;;;85         bool status;
;;;86         QF_CRIT_STAT_
;;;87     
;;;88         /* \pre event must be valid */
;;;89         Q_REQUIRE_ID(100, e != (QEvt const *)0);
000010  e3550000          CMP      r5,#0
000014  0a000000          BEQ      |L1.28|
000018  ea000002          B        |L1.40|
                  |L1.28|
00001c  e3a01064          MOV      r1,#0x64
000020  e59f00b4          LDR      r0,|L1.220|
000024  ebfffffe          BL       Q_onAssert
                  |L1.40|
;;;90     
;;;91         QF_CRIT_ENTRY_();
000028  ef0000fe          SVC      #0xfe
;;;92         nFree = me->nFree; /* get volatile into the temporary */
00002c  e5946014          LDR      r6,[r4,#0x14]
;;;93     
;;;94         /* required margin available? */
;;;95         if (nFree > (QEQueueCtr)margin) {
000030  e1560007          CMP      r6,r7
000034  9a00001d          BLS      |L1.176|
;;;96     
;;;97             QS_BEGIN_NOCRIT_(QS_QF_EQUEUE_POST_FIFO, QS_priv_.eqObjFilter, me)
;;;98                 QS_TIME_();                      /* timestamp */
;;;99                 QS_SIG_(e->sig);                 /* the signal of this event */
;;;100                QS_OBJ_(me);                     /* this queue object */
;;;101                QS_2U8_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
;;;102                QS_EQC_(nFree);                  /* number of free entries */
;;;103                QS_EQC_(me->nMin);               /* min number of free entries */
;;;104            QS_END_NOCRIT_()
;;;105    
;;;106            /* is it a pool event? */
;;;107            if (e->poolId_ != (uint8_t)0) {
000038  e5d50002          LDRB     r0,[r5,#2]
00003c  e3500000          CMP      r0,#0
000040  0a000002          BEQ      |L1.80|
;;;108                QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
000044  e5d50003          LDRB     r0,[r5,#3]
000048  e2800001          ADD      r0,r0,#1
00004c  e5c50003          STRB     r0,[r5,#3]
                  |L1.80|
;;;109            }
;;;110    
;;;111            --nFree; /* one free entry just used up */
000050  e2466001          SUB      r6,r6,#1
;;;112            me->nFree = nFree; /* update the volatile */
000054  e5846014          STR      r6,[r4,#0x14]
;;;113            if (me->nMin > nFree) {
000058  e5940018          LDR      r0,[r4,#0x18]
00005c  e1500006          CMP      r0,r6
000060  9a000000          BLS      |L1.104|
;;;114                me->nMin = nFree; /* update minimum so far */
000064  e5846018          STR      r6,[r4,#0x18]
                  |L1.104|
;;;115            }
;;;116    
;;;117            /* was the queue empty? */
;;;118            if (me->frontEvt == (QEvt const *)0) {
000068  e5940000          LDR      r0,[r4,#0]
00006c  e3500000          CMP      r0,#0
000070  1a000001          BNE      |L1.124|
;;;119                me->frontEvt = e; /* deliver event directly */
000074  e5845000          STR      r5,[r4,#0]
000078  ea00000a          B        |L1.168|
                  |L1.124|
;;;120            }
;;;121            /* queue was not empty, insert event into the ring-buffer */
;;;122            else {
;;;123                /* insert event into the ring buffer (FIFO)... */
;;;124                QF_PTR_AT_(me->ring, me->head) = e; /* insert e into buffer */
00007c  e5940004          LDR      r0,[r4,#4]
000080  e594100c          LDR      r1,[r4,#0xc]
000084  e7805101          STR      r5,[r0,r1,LSL #2]
;;;125                /* need to wrap the head? */
;;;126                if (me->head == (QEQueueCtr)0) {
000088  e594000c          LDR      r0,[r4,#0xc]
00008c  e3500000          CMP      r0,#0
000090  1a000001          BNE      |L1.156|
;;;127                    me->head = me->end; /* wrap around */
000094  e5940008          LDR      r0,[r4,#8]
000098  e584000c          STR      r0,[r4,#0xc]
                  |L1.156|
;;;128                }
;;;129                --me->head;
00009c  e594000c          LDR      r0,[r4,#0xc]
0000a0  e2400001          SUB      r0,r0,#1
0000a4  e584000c          STR      r0,[r4,#0xc]
                  |L1.168|
;;;130            }
;;;131            status = true; /* event posted successfully */
0000a8  e3a08001          MOV      r8,#1
0000ac  ea000006          B        |L1.204|
                  |L1.176|
;;;132        }
;;;133        else {
;;;134            /** \note If the \c margin is zero, assert that the queue can accept
;;;135            * the event. This is to support the "guaranteed event delivery"
;;;136            * policy for most events posted within the framework.
;;;137            */
;;;138            Q_ASSERT_ID(110, margin != (uint_fast16_t)0);
0000b0  e3570000          CMP      r7,#0
0000b4  0a000000          BEQ      |L1.188|
0000b8  ea000002          B        |L1.200|
                  |L1.188|
0000bc  e3a0106e          MOV      r1,#0x6e
0000c0  e59f0014          LDR      r0,|L1.220|
0000c4  ebfffffe          BL       Q_onAssert
                  |L1.200|
;;;139    
;;;140            QS_BEGIN_NOCRIT_(QS_QF_EQUEUE_POST_ATTEMPT, QS_priv_.eqObjFilter, me)
;;;141                QS_TIME_();                      /* timestamp */
;;;142                QS_SIG_(e->sig);                 /* the signal of this event */
;;;143                QS_OBJ_(me);                     /* this queue object */
;;;144                QS_2U8_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
;;;145                QS_EQC_(nFree);                  /* number of free entries */
;;;146                QS_EQC_(margin);                 /* margin requested */
;;;147            QS_END_NOCRIT_()
;;;148    
;;;149            status = false;
0000c8  e3a08000          MOV      r8,#0
                  |L1.204|
;;;150        }
;;;151        QF_CRIT_EXIT_();
0000cc  ef0000ff          SVC      #0xff
;;;152    
;;;153        return status;
0000d0  e1a00008          MOV      r0,r8
0000d4  e8bd41f0          POP      {r4-r8,lr}
;;;154    }
0000d8  e12fff1e          BX       lr
                          ENDP

                  |L1.220|
                          DCD      Q_this_module_

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7165715f          DCB      0x71,0x65,0x71,0x5f
000004  6669666f          DCB      0x66,0x69,0x66,0x6f
000008  00                DCB      0x00
