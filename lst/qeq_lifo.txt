; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qeq_lifo.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qeq_lifo.d --apcs=interwork -O0 --diag_suppress=9931 -I.\bombqmbsp -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\include -I.\src -I.\src\coffee -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qeq_lifo.crf ..\..\..\..\..\..\..\Framewworks\Quantum\qpc_5.3.1\qpc\qf\source\qeq_lifo.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  QEQueue_postLIFO PROC
;;;72     */
;;;73     void QEQueue_postLIFO(QEQueue * const me, QEvt const * const e) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;74         QEvt const *frontEvt; /* temporary to avoid UB for volatile access */
;;;75         QEQueueCtr nFree;     /* temporary to avoid UB for volatile access */
;;;76         QF_CRIT_STAT_
;;;77     
;;;78         QF_CRIT_ENTRY_();
00000c  ef0000fe          SVC      #0xfe
;;;79         nFree = me->nFree;    /* get volatile into the temporary */
000010  e5946014          LDR      r6,[r4,#0x14]
;;;80     
;;;81         /** \pre the queue must be able to accept the event (cannot overflow) */
;;;82         Q_REQUIRE_ID(100, nFree != (QEQueueCtr)0);
000014  e3560000          CMP      r6,#0
000018  0a000000          BEQ      |L1.32|
00001c  ea000002          B        |L1.44|
                  |L1.32|
000020  e3a01064          MOV      r1,#0x64
000024  e59f007c          LDR      r0,|L1.168|
000028  ebfffffe          BL       Q_onAssert
                  |L1.44|
;;;83     
;;;84         QS_BEGIN_NOCRIT_(QS_QF_EQUEUE_POST_LIFO, QS_priv_.eqObjFilter, me)
;;;85             QS_TIME_();              /* timestamp */
;;;86             QS_SIG_(e->sig);         /* the signal of this event */
;;;87             QS_OBJ_(me);             /* this queue object */
;;;88             QS_2U8_(e->poolId_, e->refCtr_);/* pool Id & ref Count of the event */
;;;89             QS_EQC_(nFree);          /* number of free entries */
;;;90             QS_EQC_(me->nMin);       /* min number of free entries */
;;;91         QS_END_NOCRIT_()
;;;92     
;;;93         /* is it a pool event? */
;;;94         if (e->poolId_ != (uint8_t)0) {
00002c  e5d50002          LDRB     r0,[r5,#2]
000030  e3500000          CMP      r0,#0
000034  0a000002          BEQ      |L1.68|
;;;95             QF_EVT_REF_CTR_INC_(e);  /* increment the reference counter */
000038  e5d50003          LDRB     r0,[r5,#3]
00003c  e2800001          ADD      r0,r0,#1
000040  e5c50003          STRB     r0,[r5,#3]
                  |L1.68|
;;;96         }
;;;97     
;;;98         --nFree;  /* one free entry just used up */
000044  e2466001          SUB      r6,r6,#1
;;;99         me->nFree = nFree; /* update the volatile */
000048  e5846014          STR      r6,[r4,#0x14]
;;;100        if (me->nMin > nFree) {
00004c  e5940018          LDR      r0,[r4,#0x18]
000050  e1500006          CMP      r0,r6
000054  9a000000          BLS      |L1.92|
;;;101            me->nMin = nFree; /* update minimum so far */
000058  e5846018          STR      r6,[r4,#0x18]
                  |L1.92|
;;;102        }
;;;103    
;;;104        frontEvt = me->frontEvt; /* read volatile into the temporary */
00005c  e5947000          LDR      r7,[r4,#0]
;;;105        me->frontEvt = e; /* deliver event directly to the front of the queue */
000060  e5845000          STR      r5,[r4,#0]
;;;106    
;;;107        /* was the queue not empty? */
;;;108        if (frontEvt != (QEvt const *)0) {
000064  e3570000          CMP      r7,#0
000068  0a00000b          BEQ      |L1.156|
;;;109            ++me->tail;
00006c  e5940010          LDR      r0,[r4,#0x10]
000070  e2800001          ADD      r0,r0,#1
000074  e5840010          STR      r0,[r4,#0x10]
;;;110            if (me->tail == me->end) {     /* need to wrap the tail? */
000078  e5940010          LDR      r0,[r4,#0x10]
00007c  e5941008          LDR      r1,[r4,#8]
000080  e1500001          CMP      r0,r1
000084  1a000001          BNE      |L1.144|
;;;111                me->tail = (QEQueueCtr)0;  /* wrap around */
000088  e3a00000          MOV      r0,#0
00008c  e5840010          STR      r0,[r4,#0x10]
                  |L1.144|
;;;112            }
;;;113            QF_PTR_AT_(me->ring, me->tail) = frontEvt; /* save old front evt */
000090  e5940004          LDR      r0,[r4,#4]
000094  e5941010          LDR      r1,[r4,#0x10]
000098  e7807101          STR      r7,[r0,r1,LSL #2]
                  |L1.156|
;;;114        }
;;;115        QF_CRIT_EXIT_();
00009c  ef0000ff          SVC      #0xff
;;;116    }
0000a0  e8bd41f0          POP      {r4-r8,lr}
0000a4  e12fff1e          BX       lr
                          ENDP

                  |L1.168|
                          DCD      Q_this_module_

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7165715f          DCB      0x71,0x65,0x71,0x5f
000004  6c69666f          DCB      0x6c,0x69,0x66,0x6f
000008  00                DCB      0x00
