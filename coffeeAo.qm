<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <documentation>Simple model template for QP/C</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="QTimeEvt" superclass="qpc::QEvt"/>
  <class name="SetEvt" superclass="qpc::QEvt">
   <attribute name="digit" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="TimeEvt" superclass="qpc::QEvt">
   <attribute name="current_time" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="AdEvt" superclass="qpc::QEvt">
   <attribute name="val" type="uint16_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <package name="StateMachines" stereotype="0x02">
  <class name="CoffeeAO" superclass="qpc::QActive">
   <documentation>Test active object</documentation>
   <attribute name="current_time" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="alarm" type="Alarm" visibility="0x00" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="current_menu_index" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="max_menu_index" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="current_brew_strength" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="is_coffee_pot_in_machine" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="is_automatic_brew_active" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1/2">
     <action brief="initial_action">(void)e;               /* avoid compiler warning about unused parameter */
me-&gt;current_time = 0;
Alarm_init(&amp;me-&gt;alarm);      /* the initial transition in the component */
me-&gt;max_menu_index = 6;
me-&gt;current_menu_index = 0;</action>
     <initial_glyph conn="5,18,5,3,35">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="coffeemachine">
     <tran trig="BREW">
      <action>printf(&quot;testing for coffee pot\n&quot;);</action>
      <choice>
       <guard brief="POT_GUARDIAN">l_CoffeeAO.is_coffee_pot_in_machine != 0</guard>
       <action>printf(&quot;test for coffee pot ok, starting to brew&quot;);</action>
       <choice_glyph conn="178,34,4,-1,7">
        <action box="-5,9,13,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="185,34,1,-1,-7">
       <action box="-6,-2,9,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIME">
      <tran_glyph conn="185,48,1,-1,-8,5">
       <action box="-7,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="menu">
      <tran trig="ADWHEEL">
       <action>// calculate current menu entry
/*
unsigned const char* current_menu_entry = &quot;current menu entry&quot;;
char time[20];
lcd_clear();
set_cursor(0, 0);
lcd_print(current_menu_entry);
set_cursor(0, 1);
sprintf(time, &quot;%i&quot;, ((AdEvt*)e)-&gt;val);
lcd_print(time);*/
char menu_text[20];
struct Entry* menu_entry = &amp;menu_entries[me-&gt;current_menu_index];
me-&gt;current_menu_index = ((AdEvt*)e)-&gt;val * me-&gt;max_menu_index / 1024;
lcd_clear();
set_cursor(0, 0);
switch (menu_entry-&gt;interpolate_with) {
case NOTHING:
    strcpy(menu_text, menu_entry-&gt;menu_label);
    break;
case BREW_STRENGTH:
    sprintf(menu_text, menu_entry-&gt;menu_label, l_CoffeeAO.current_brew_strength + 1);
    break;
case IS_COFFEE_POT_IN_MACHINE:
    sprintf(menu_text, menu_entry-&gt;menu_label, l_CoffeeAO.is_coffee_pot_in_machine);
    break;
case IS_AUTOMATIC_BREW_ACTIVE:
    sprintf(menu_text, menu_entry-&gt;menu_label, l_CoffeeAO.is_automatic_brew_active);
    break;
}
lcd_print(menu_text);</action>
       <tran_glyph conn="170,22,1,-1,-11">
        <action box="-8,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="INT">
       <action>QEvent *menuEvt = Q_NEW(QEvent, menu_entries[me-&gt;current_menu_index].signal);
//QEvent *menuEvt = Q_NEW(QEvent, GO_COFFEE_POT_TOGGLE_SIG);
QF_INT_ENABLE();
QActive_postFIFO((QActive *)&amp;l_CoffeeAO, menuEvt);
QF_INT_DISABLE();
</action>
       <tran_glyph conn="170,29,1,-1,-11">
        <action box="-8,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_COFFEE_POT_TOGGLE" target="../../3/12">
       <tran_glyph conn="86,52,2,0,14">
        <action box="-8,-2,22,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_TIME_BREW_TOGGLE" target="../../3/3">
       <tran_glyph conn="101,52,2,0,14">
        <action box="-4,-2,17,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_SET_BREW_TIME_CLOCK" target="../../3/4">
       <tran_glyph conn="68,52,2,0,14">
        <action box="-10,-2,20,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_SET_TIME_OF_DAY" target="../../3/5">
       <tran_glyph conn="50,52,2,0,14">
        <action box="-8,-2,17,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_START_BREWING" target="../../3/2">
       <tran_glyph conn="123,52,2,0,14">
        <action box="-8,-2,15,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GO_SET_BREW_STRENGTH" target="../../3/1">
       <tran_glyph conn="139,52,2,0,14">
        <action box="-9,-2,19,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="40,15,130,37"/>
     </state>
     <state name="submenu">
      <tran trig="GO_BACK" target="../../2">
       <tran_glyph conn="171,64,1,3,7,68,-150,-95,12">
        <action box="2,-3,10,2"/>
       </tran_glyph>
      </tran>
      <state name="setBrewStrength">
       <entry>lcd_clear();
set_cursor(0, 0);
lcd_print(&quot;Use AD-Wheel&quot;);
set_cursor(0, 1);
lcd_print(&quot;Use int0 to save&quot;);
printf(&quot;Changing brew strength...\n&quot;);</entry>
       <exit>printf(&quot;saved brew strength: %u\n&quot;, l_CoffeeAO.current_brew_strength);</exit>
       <tran trig="ADWHEEL">
        <action>const int led_count = 8;
int i = 0;
l_CoffeeAO.current_brew_strength = ((AdEvt*)e)-&gt;val * led_count / 1024;
for(i = 0; i &lt; led_count; i++) {
    if (i &lt;= l_CoffeeAO.current_brew_strength) {
        LED_On(i);
    } else {
        LED_Off(i);
    }
}
</action>
        <tran_glyph conn="147,71,1,-1,-9">
         <action box="-8,-2,10,3"/>
        </tran_glyph>
       </tran>
       <tran trig="INT">
        <action>QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, GO_BACK_SIG));</action>
        <tran_glyph conn="147,75,1,-1,-9">
         <action box="-7,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="132,66,15,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="startBrewingNow">
       <entry>QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, BREW_SIG));
QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, GO_BACK_SIG));</entry>
       <exit>printf(&quot;Starting to brew\n&quot;);</exit>
       <state_glyph node="115,66,15,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="timeBrewActivatedToggle">
       <entry>l_CoffeeAO.is_automatic_brew_active = l_CoffeeAO.is_automatic_brew_active == 0 ? 1 : 0;
QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, GO_BACK_SIG));</entry>
       <exit>printf(&quot;toggled automatic brew to: %u\n&quot;, l_CoffeeAO.is_automatic_brew_active);</exit>
       <state_glyph node="97,66,15,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="set_brew_h1">
       <entry>lcd_clear();
set_cursor(0, 0);
lcd_print(&quot;!set brew time clock!&quot;);</entry>
       <tran trig="ADWHEEL">
        <tran_glyph conn="76,72,1,-1,-8">
         <action box="-8,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="INT" target="../../9">
        <tran_glyph conn="64,76,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="60,66,16,10">
        <entry box="1,2,5,2"/>
       </state_glyph>
      </state>
      <state name="set_clock_h1">
       <entry>lcd_clear();</entry>
       <tran trig="ADWHEEL">
        <action>char clock_message[20];
int value = ((AdEvt*)e)-&gt;val * 3 / 1024;
HourAndMinute* ham = &amp;l_CoffeeAO.alarm.current_time;
ham-&gt;hours = MIN(10*value + ham-&gt;hours % 10, 23);
sprintf(clock_message, &quot;%02u:%02u&quot;, ham-&gt;hours, ham-&gt;minutes);

set_cursor(0, 0);
lcd_print(clock_message);
set_cursor(0, 1);
lcd_print(&quot;^&quot;);</action>
        <tran_glyph conn="58,72,1,-1,-7">
         <action box="-8,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="INT" target="../../6">
        <tran_glyph conn="47,76,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,66,15,10">
        <entry box="1,2,5,2"/>
       </state_glyph>
      </state>
      <state name="set_clock_h2">
       <entry>lcd_clear();</entry>
       <tran trig="INT" target="../../7">
        <tran_glyph conn="47,90,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="ADWHEEL">
        <action>char clock_message[20];
int value = ((AdEvt*)e)-&gt;val * 10 / 1024;
HourAndMinute* ham = &amp;l_CoffeeAO.alarm.current_time;
ham-&gt;hours = MIN((ham-&gt;hours / 10) * 10 + value, 23);
sprintf(clock_message, &quot;%02u:%02u&quot;, ham-&gt;hours, ham-&gt;minutes);

set_cursor(0, 0);
lcd_print(clock_message);
set_cursor(1, 1);
lcd_print(&quot;^&quot;);</action>
        <tran_glyph conn="58,86,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,80,15,10">
        <entry box="1,2,5,2"/>
       </state_glyph>
      </state>
      <state name="set_clock_m1">
       <tran trig="INT" target="../../8">
        <tran_glyph conn="47,104,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="ADWHEEL">
        <tran_glyph conn="58,100,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,94,15,10"/>
      </state>
      <state name="set_clock_m2">
       <tran trig="ADWHEEL">
        <tran_glyph conn="58,114,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="INT">
        <action>QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, GO_BACK_SIG));</action>
        <tran_glyph conn="58,116,1,-1,-7">
         <action box="-6,0,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,108,15,10"/>
      </state>
      <state name="set_brew_h2">
       <tran trig="INT" target="../../10">
        <tran_glyph conn="64,90,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="ADWHEEL">
        <tran_glyph conn="75,86,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="60,80,15,10"/>
      </state>
      <state name="set_brew_m1">
       <tran trig="INT" target="../../11">
        <tran_glyph conn="64,104,2,0,4">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="ADWHEEL">
        <tran_glyph conn="75,100,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="60,94,15,10"/>
      </state>
      <state name="set_brew_m2">
       <tran trig="ADWHEEL">
        <tran_glyph conn="75,114,1,-1,-7">
         <action box="-7,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="INT">
        <tran_glyph conn="75,116,1,-1,-7">
         <action box="-6,0,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="60,108,15,10"/>
      </state>
      <state name="coffeePotToggle">
       <entry>l_CoffeeAO.is_coffee_pot_in_machine = l_CoffeeAO.is_coffee_pot_in_machine == 0 ? 1 : 0;
QActive_postFIFO((QActive *)&amp;l_CoffeeAO, Q_NEW(QEvent, GO_BACK_SIG));</entry>
       <exit>printf(&quot;toggled coffee pot in machine to: %u\n&quot;, l_CoffeeAO.is_coffee_pot_in_machine);</exit>
       <state_glyph node="79,66,15,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="41,59,130,60"/>
     </state>
     <state_glyph node="18,9,167,129"/>
    </state>
    <state_diagram size="206,142"/>
   </statechart>
  </class>
  <class name="Alarm" superclass="qpc::QFsm">
   <attribute name="alarm_time_struct" type="HourAndMinute" visibility="0x00" properties="0x00"/>
   <attribute name="current_time" type="HourAndMinute" visibility="0x00" properties="0x00"/>
   <attribute name="alarm_time" type="uint16_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>(void)e;               /* avoid compiler warning about unused parameter */
me-&gt;alarm_time = 12*60;</action>
     <initial_glyph conn="6,15,5,3,16">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry brief="entry action"> /* while in the off state, the alarm is kept in decimal format */
me-&gt;alarm_time = (me-&gt;alarm_time/60)*100 + me-&gt;alarm_time%60;
printf(&quot;*** Alarm OFF %02ld:%02ld\n&quot;,
    me-&gt;alarm_time/100, me-&gt;alarm_time%100);
fflush(stdout);</entry>
     <exit brief="exit action">          /* upon exit, the alarm is converted to binary format */
            me-&gt;alarm_time = (me-&gt;alarm_time/100)*60 + me-&gt;alarm_time%100;</exit>
     <tran trig="ALARM_ON">
      <choice target="../../../2">
       <guard>(me-&gt;alarm_time / 100 &lt; 24) &amp;&amp; (me-&gt;alarm_time % 100 &lt; 60)</guard>
       <choice_glyph conn="60,27,4,1,18,-9">
        <action box="-7,18,14,3"/>
       </choice_glyph>
      </choice>
      <choice target="../..">
       <guard>else</guard>
       <action>me-&gt;alarm_time = 0;
printf(&quot;*** Alarm reset %02ld:%02ld\n&quot;,
       me-&gt;alarm_time/100, me-&gt;alarm_time%100);</action>
       <choice_glyph conn="60,27,5,1,-9">
        <action box="-7,-2,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="51,16,1,-1,9,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ALARM_SET">
      <action brief="set alarm">          /* while setting, the alarm is kept in decimal format */
            me-&gt;alarm_time = (10 * me-&gt;alarm_time
                              + ((SetEvt const *)e)-&gt;digit) % 10000;
            printf(&quot;*** Alarm SET %02ld:%02ld\n&quot;,
                   me-&gt;alarm_time/100, me-&gt;alarm_time%100);
            fflush(stdout);</action>
      <tran_glyph conn="22,22,3,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="22,12,29,20">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry brief="entry action">printf(&quot;*** Alarm ON %02ld:%02ld\n&quot;,
                   me-&gt;alarm_time/60, me-&gt;alarm_time%60);
            fflush(stdout);</entry>
     <tran trig="ALARM_SET">
      <action brief="set alarm">printf(&quot;*** Cannot set Alarm when it is ON\n&quot;);
fflush(stdout); </action>
      <tran_glyph conn="22,43,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ALARM_OFF" target="../../1">
      <tran_glyph conn="22,47,3,3,-7,-21,7">
       <action box="-9,0,12,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIME">
      <choice>
       <guard brief="alarm time?">((TimeEvt *)e)-&gt;current_time == me-&gt;alarm_time</guard>
       <action brief="post alarm">printf(&quot;ALARM!!!\n&quot;);
/* asynchronously post the event to the container AO */
QActive_postFIFO(APP_alarmClock, Q_NEW(QEvent, ALARM_SIG));</action>
       <choice_glyph conn="41,49,5,-1,-10">
        <action box="-9,-2,9,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="51,49,1,-1,-10">
       <action box="-4,-2,7,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="22,34,29,20">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="90,62"/>
   </statechart>
  </class>
  <operation name="CoffeeAO_ctor" type="void" visibility="0x00" properties="0x00">
   <parameter name="me" type="CoffeeAO*"/>
   <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;CoffeeAO_initial);
Alarm_ctor(&amp;me-&gt;alarm);                /* orthogonal component ctor */
QTimeEvt_ctor(&amp;me-&gt;timeEvt, TICK_SIG);       /* private time event ctor */</code>
  </operation>
  <operation name="Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <parameter name="me" type="Alarm *"/>
   <code>QFsm_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Alarm_initial);</code>
  </operation>
 </package>
 <directory name="src\coffee">
  <file name="coffee.c">
   <text>
#include  &quot;alarm.h&quot;
#include &quot;coffee.h&quot;


extern CoffeeAO l_CoffeeAO;

unsigned char me1s[] = &quot;Set Brew time&quot;;
unsigned char me2s[] = &quot;Set Clock&quot;;
unsigned char me3s[] = &quot;Pot inside: %u&quot;;
unsigned char me4s[] = &quot;Autobrewing: %u&quot;;
unsigned char me5s[] = &quot;Start brewing&quot;;
unsigned char me6s[] = &quot;Brew strength %u&quot;;

static struct Entry menu_entries[] = { 
    { GO_SET_BREW_TIME_CLOCK_SIG, &amp;me1s[0], NOTHING }, 
    { GO_SET_TIME_OF_DAY_SIG, &amp;me2s[0], NOTHING }, 
    { GO_COFFEE_POT_TOGGLE_SIG, &amp;me3s[0], IS_COFFEE_POT_IN_MACHINE }, 
    { GO_TIME_BREW_TOGGLE_SIG, &amp;me4s[0], IS_AUTOMATIC_BREW_ACTIVE }, 
    { GO_START_BREWING_SIG, &amp;me5s[0], NOTHING }, 
    { GO_SET_BREW_STRENGTH_SIG, &amp;me6s[0], BREW_STRENGTH } 
};


$define(StateMachines::CoffeeAO)
$define(StateMachines::CoffeeAO_ctor)</text>
  </file>
  <file name="coffee.h">
   <text>#ifndef _COFFEE_H_
#define _COFFEE_H_

#include &quot;stdio.h&quot;
#include &quot;qp_port.h&quot;
#include &quot;qmbsp.h&quot;
#include &quot;alarm.h&quot;

enum InterpolateWith {
    NOTHING,
    IS_COFFEE_POT_IN_MACHINE,
    IS_AUTOMATIC_BREW_ACTIVE,
    BREW_STRENGTH
};

struct Entry {
    enum AlarmClockSignals signal;
    unsigned const char* menu_label;
    enum InterpolateWith interpolate_with;
};

$declare(StateMachines::CoffeeAO)
$declare(StateMachines::CoffeeAO_ctor)
#endif</text>
  </file>
  <file name="alarm.c">
   <text>#include &quot;qp_port.h&quot;
#include &quot;alarm.h&quot;

$define(StateMachines::Alarm_ctor)
$define(StateMachines::Alarm)</text>
  </file>
  <file name="alarm.h">
   <text>#ifndef _ALARM_H
#define _ALARM_H

#include &quot;qp_port.h&quot;
#include &lt;stdio.h&gt;

#define MAX(x, y) (((x) &gt; (y)) ? (x) : (y))
#define MIN(x, y) (((x) &lt; (y)) ? (x) : (y))

enum AlarmClockSignals {
    TICK_SIG = Q_USER_SIG,                               /* time tick event */
    ALARM_SET_SIG,                                         /* set the alarm */
    ALARM_ON_SIG,                                      /* turn the alarm on */
    ALARM_OFF_SIG,                                    /* turn the alarm off */
    ALARM_SIG,  /* alarm event from Alarm component to AlarmClock container */
    CLOCK_12H_SIG,                             /* set the clock in 12H mode */
    CLOCK_24H_SIG,                             /* set the clock in 24H mode */
    TIME_SIG,           /* time event sent to Alarm (contains current time) */
    TERMINATE_SIG,                              /* terminate the application */
    GO_COFFEE_POT_TOGGLE_SIG,
    GO_TIME_BREW_TOGGLE_SIG,
    GO_SET_BREW_TIME_CLOCK_SIG,
    GO_SET_TIME_OF_DAY_SIG,
    GO_START_BREWING_SIG,
    GO_SET_BREW_STRENGTH_SIG,
    GO_BACK_SIG,
    ADWHEEL_SIG,
    INT_SIG,
    BREW_SIG
};

typedef struct HourAndMinuteTag {
    uint8_t hours;
    uint8_t minutes;
} HourAndMinute;

extern QActive *APP_alarmClock;

$declare(Events::SetEvt)
$declare(Events::TimeEvt)
$declare(Events::AdEvt)
$declare(StateMachines::Alarm)
$declare(StateMachines::Alarm_ctor)

#define Alarm_init(me_)           QFsm_init    ((QFsm *)(me_), (QEvent *)0)
#define Alarm_dispatch(me_, e_)   QFsm_dispatch((QFsm *)(me_), e_)

#endif</text>
  </file>
 </directory>
</model>
